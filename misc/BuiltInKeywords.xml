<?xml version="1.0" encoding="UTF-8"?>
<!-- ************************************************** -->
<!-- * This file is generated automatically by the    * -->
<!-- * qtspecs build process. It is committed to the  * -->
<!-- * test repository automatically. Any changes you * -->
<!-- * make to this file will be lost on the next     * -->
<!-- * build. Have a nice day. The cake is a lie.     * -->
<!-- ************************************************** -->
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
           name="misc-BuiltInKeywords">
   <description>Tests for keyword argument names to built-in functions: 4.0 proposal</description>
   <dependency type="spec" value="XP40+ XQ40+"/>
   <!--Generated using generate-keyword-test-set.xsl from function-catalog.xml on 2023-04-06Z-->
   <environment name="ka">
      <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
      <decimal-format name="data" decimal-separator="." grouping-separator=","/>
      <source role="." file="BuiltInKeywords/simple-doc.xml"/>
   </environment>
   <test-case name="Keywords-fn-node-name-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:node-name(node := /doc)
            return fn:deep-equal($x, /doc!fn:node-name(/doc)) and $x instance of xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-nilled-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:nilled(node := /doc)
            return fn:deep-equal($x, /doc!fn:nilled(/doc)) and $x instance of xs:boolean?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:string(item := "abc")
            return fn:deep-equal($x, /doc!fn:string("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-data-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:data(input := ("abc", "def"))
            return fn:deep-equal($x, /doc!fn:data(("abc", "def"))) and $x instance of xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-base-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:base-uri(node := /doc)
            return fn:deep-equal($x, /doc!fn:base-uri(/doc)) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-document-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:document-uri(node := /doc)
            return fn:deep-equal($x, /doc!fn:document-uri(/doc)) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-trace-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:trace(value := ("abc", "def"), label := "abc")
            return fn:deep-equal($x, fn:trace(("abc", "def"), "abc")) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-abs-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:abs(value := 1)
            return fn:deep-equal($x, fn:abs(1)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-ceiling-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:ceiling(value := 1)
            return fn:deep-equal($x, fn:ceiling(1)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-floor-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:floor(value := 1)
            return fn:deep-equal($x, fn:floor(1)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-round-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:round(value := 1, precision := 1)
            return fn:deep-equal($x, fn:round(1, 1)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-round-half-to-even-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:round-half-to-even(value := 1, precision := 1)
            return fn:deep-equal($x, fn:round-half-to-even(1, 1)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-integer-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:format-integer(value := 1, picture := '0.0', lang := "abc")
            return fn:deep-equal($x, fn:format-integer(1, '0.0', "abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-number-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:format-number(value := 1, picture := '0.0', decimal-format-name := 'data')
            return fn:deep-equal($x, fn:format-number(1, '0.0', 'data')) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-pi-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:pi()
            return fn:deep-equal($x, math:pi()) and $x instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-exp-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:exp(value := 1)
            return fn:deep-equal($x, math:exp(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-exp10-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:exp10(value := 1)
            return fn:deep-equal($x, math:exp10(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-log-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:log(value := 1)
            return fn:deep-equal($x, math:log(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-log10-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:log10(value := 1)
            return fn:deep-equal($x, math:log10(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-sqrt-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:sqrt(value := 1)
            return fn:deep-equal($x, math:sqrt(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-pow-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:pow(x := 1, y := 1)
            return fn:deep-equal($x, math:pow(1, 1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-sin-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:sin(radians := 1)
            return fn:deep-equal($x, math:sin(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-cos-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:cos(radians := 1)
            return fn:deep-equal($x, math:cos(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-tan-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:tan(radians := 1)
            return fn:deep-equal($x, math:tan(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-asin-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:asin(value := 1)
            return fn:deep-equal($x, math:asin(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-acos-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:acos(value := 1)
            return fn:deep-equal($x, math:acos(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-atan-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:atan(value := 1)
            return fn:deep-equal($x, math:atan(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-atan2-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := math:atan2(y := 1, x := 1)
            return fn:deep-equal($x, math:atan2(1, 1)) and $x instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-codepoints-to-string-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:codepoints-to-string(values := (42, 43))
            return fn:deep-equal($x, fn:codepoints-to-string((42, 43))) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-to-codepoints-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:string-to-codepoints(value := "abc")
            return fn:deep-equal($x, fn:string-to-codepoints("abc")) and $x instance of xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-compare-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:compare(value1 := "abc", value2 := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:compare("abc", "abc", fn:default-collation())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-codepoint-equal-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:codepoint-equal(value1 := "abc", value2 := "abc")
            return fn:deep-equal($x, fn:codepoint-equal("abc", "abc")) and $x instance of xs:boolean?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-join-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:string-join(values := ("abc", "def"), separator := "abc")
            return fn:deep-equal($x, fn:string-join(("abc", "def"), "abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:substring(value := "abc", start := 1, length := 1)
            return fn:deep-equal($x, fn:substring("abc", 1, 1)) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-length-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:string-length(value := "abc")
            return fn:deep-equal($x, fn:string-length("abc")) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-normalize-space-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:normalize-space(value := "abc")
            return fn:deep-equal($x, fn:normalize-space("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-normalize-unicode-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:normalize-unicode(value := "abc", form := 'nfc')
            return fn:deep-equal($x, fn:normalize-unicode("abc", 'nfc')) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-upper-case-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:upper-case(value := "abc")
            return fn:deep-equal($x, fn:upper-case("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-lower-case-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:lower-case(value := "abc")
            return fn:deep-equal($x, fn:lower-case("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-translate-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:translate(value := "abc", replace := "abc", with := "abc")
            return fn:deep-equal($x, fn:translate("abc", "abc", "abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-encode-for-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:encode-for-uri(value := "abc")
            return fn:deep-equal($x, fn:encode-for-uri("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-iri-to-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:iri-to-uri(value := "abc")
            return fn:deep-equal($x, fn:iri-to-uri("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-escape-html-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:escape-html-uri(value := "abc")
            return fn:deep-equal($x, fn:escape-html-uri("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-contains-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:contains(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:contains("abc", "abc", fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-starts-with-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:starts-with(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:starts-with("abc", "abc", fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-ends-with-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:ends-with(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:ends-with("abc", "abc", fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-before-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:substring-before(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:substring-before("abc", "abc", fn:default-collation())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-after-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:substring-after(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:substring-after("abc", "abc", fn:default-collation())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-matches-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:matches(value := "abc", pattern := "abc", flags := 'x')
            return fn:deep-equal($x, fn:matches("abc", "abc", 'x')) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-tokenize-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:tokenize(value := "abc", pattern := "abc", flags := 'x')
            return fn:deep-equal($x, fn:tokenize("abc", "abc", 'x')) and $x instance of xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-analyze-string-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:analyze-string(value := "abc", pattern := "abc", flags := 'x')
            return fn:deep-equal($x, fn:analyze-string("abc", "abc", 'x')) and $x instance of element(fn:analyze-string-result)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-contains-token-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:contains-token(value := ("abc", "def"), token := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:contains-token(("abc", "def"), "abc", fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-resolve-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:resolve-uri(relative := "abc", base := 'http://example.com/')
            return fn:deep-equal($x, fn:resolve-uri("abc", 'http://example.com/')) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-true-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:true()
            return fn:deep-equal($x, fn:true()) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-false-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:false()
            return fn:deep-equal($x, fn:false()) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-boolean-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:boolean(input := 42)
            return fn:deep-equal($x, fn:boolean(42)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-not-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:not(input := 42)
            return fn:deep-equal($x, fn:not(42)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-years-from-duration-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:years-from-duration(value := xs:dayTimeDuration('P1D'))
            return fn:deep-equal($x, fn:years-from-duration(xs:dayTimeDuration('P1D'))) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-months-from-duration-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:months-from-duration(value := xs:dayTimeDuration('P1D'))
            return fn:deep-equal($x, fn:months-from-duration(xs:dayTimeDuration('P1D'))) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-days-from-duration-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:days-from-duration(value := xs:dayTimeDuration('P1D'))
            return fn:deep-equal($x, fn:days-from-duration(xs:dayTimeDuration('P1D'))) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-hours-from-duration-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:hours-from-duration(value := xs:dayTimeDuration('P1D'))
            return fn:deep-equal($x, fn:hours-from-duration(xs:dayTimeDuration('P1D'))) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-minutes-from-duration-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:minutes-from-duration(value := xs:dayTimeDuration('P1D'))
            return fn:deep-equal($x, fn:minutes-from-duration(xs:dayTimeDuration('P1D'))) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-seconds-from-duration-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:seconds-from-duration(value := xs:dayTimeDuration('P1D'))
            return fn:deep-equal($x, fn:seconds-from-duration(xs:dayTimeDuration('P1D'))) and $x instance of xs:decimal?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:dateTime(date := current-date(), time := current-time())
            return fn:deep-equal($x, fn:dateTime(current-date(), current-time())) and $x instance of xs:dateTime?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-year-from-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:year-from-dateTime(value := current-dateTime())
            return fn:deep-equal($x, fn:year-from-dateTime(current-dateTime())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-month-from-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:month-from-dateTime(value := current-dateTime())
            return fn:deep-equal($x, fn:month-from-dateTime(current-dateTime())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-day-from-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:day-from-dateTime(value := current-dateTime())
            return fn:deep-equal($x, fn:day-from-dateTime(current-dateTime())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-hours-from-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:hours-from-dateTime(value := current-dateTime())
            return fn:deep-equal($x, fn:hours-from-dateTime(current-dateTime())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-minutes-from-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:minutes-from-dateTime(value := current-dateTime())
            return fn:deep-equal($x, fn:minutes-from-dateTime(current-dateTime())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-seconds-from-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:seconds-from-dateTime(value := current-dateTime())
            return fn:deep-equal($x, fn:seconds-from-dateTime(current-dateTime())) and $x instance of xs:decimal?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-timezone-from-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:timezone-from-dateTime(value := current-dateTime())
            return fn:deep-equal($x, fn:timezone-from-dateTime(current-dateTime())) and $x instance of xs:dayTimeDuration?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-year-from-date-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:year-from-date(value := current-date())
            return fn:deep-equal($x, fn:year-from-date(current-date())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-month-from-date-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:month-from-date(value := current-date())
            return fn:deep-equal($x, fn:month-from-date(current-date())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-day-from-date-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:day-from-date(value := current-date())
            return fn:deep-equal($x, fn:day-from-date(current-date())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-timezone-from-date-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:timezone-from-date(value := current-date())
            return fn:deep-equal($x, fn:timezone-from-date(current-date())) and $x instance of xs:dayTimeDuration?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-hours-from-time-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:hours-from-time(value := current-time())
            return fn:deep-equal($x, fn:hours-from-time(current-time())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-minutes-from-time-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:minutes-from-time(value := current-time())
            return fn:deep-equal($x, fn:minutes-from-time(current-time())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-seconds-from-time-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:seconds-from-time(value := current-time())
            return fn:deep-equal($x, fn:seconds-from-time(current-time())) and $x instance of xs:decimal?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-timezone-from-time-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:timezone-from-time(value := current-time())
            return fn:deep-equal($x, fn:timezone-from-time(current-time())) and $x instance of xs:dayTimeDuration?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-adjust-dateTime-to-timezone-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:adjust-dateTime-to-timezone(value := current-dateTime(), timezone := xs:dayTimeDuration('-PT5H'))
            return fn:deep-equal($x, fn:adjust-dateTime-to-timezone(current-dateTime(), xs:dayTimeDuration('-PT5H'))) and $x instance of xs:dateTime?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-adjust-date-to-timezone-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:adjust-date-to-timezone(value := current-date(), timezone := xs:dayTimeDuration('-PT5H'))
            return fn:deep-equal($x, fn:adjust-date-to-timezone(current-date(), xs:dayTimeDuration('-PT5H'))) and $x instance of xs:date?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-adjust-time-to-timezone-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:adjust-time-to-timezone(value := current-time(), timezone := xs:dayTimeDuration('-PT5H'))
            return fn:deep-equal($x, fn:adjust-time-to-timezone(current-time(), xs:dayTimeDuration('-PT5H'))) and $x instance of xs:time?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:format-dateTime(value := current-dateTime(), picture := '0.0', language := "abc", calendar := 'AD', place := "abc")
            return fn:deep-equal($x, fn:format-dateTime(current-dateTime(), '0.0', "abc", 'AD', "abc")) and $x instance of xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-date-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:format-date(value := current-date(), picture := '0.0', language := "abc", calendar := 'AD', place := "abc")
            return fn:deep-equal($x, fn:format-date(current-date(), '0.0', "abc", 'AD', "abc")) and $x instance of xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-time-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:format-time(value := current-time(), picture := '0.0', language := "abc", calendar := 'AD', place := "abc")
            return fn:deep-equal($x, fn:format-time(current-time(), '0.0', "abc", 'AD', "abc")) and $x instance of xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-ietf-date-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:parse-ietf-date(value := 'Wed, 06 Jun 1994 07:29:35 GMT')
            return fn:deep-equal($x, fn:parse-ietf-date('Wed, 06 Jun 1994 07:29:35 GMT')) and $x instance of xs:dateTime?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-resolve-QName-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:resolve-QName(qname := "abc", element := /doc)
            return fn:deep-equal($x, fn:resolve-QName("abc", /doc)) and $x instance of xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-QName-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:QName(uri := "abc", qname := "abc")
            return fn:deep-equal($x, fn:QName("abc", "abc")) and $x instance of xs:QName</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-QName-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:parse-QName(eqname := "abc")
            return fn:deep-equal($x, fn:parse-QName("abc")) and $x instance of xs:QName</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-expanded-QName-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:expanded-QName(qname := fn:QName('uri', 'local'))
            return fn:deep-equal($x, fn:expanded-QName(fn:QName('uri', 'local'))) and $x instance of xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-prefix-from-QName-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:prefix-from-QName(value := fn:QName('uri', 'local'))
            return fn:deep-equal($x, fn:prefix-from-QName(fn:QName('uri', 'local'))) and $x instance of xs:NCName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-local-name-from-QName-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:local-name-from-QName(value := fn:QName('uri', 'local'))
            return fn:deep-equal($x, fn:local-name-from-QName(fn:QName('uri', 'local'))) and $x instance of xs:NCName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-namespace-uri-from-QName-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:namespace-uri-from-QName(value := fn:QName('uri', 'local'))
            return fn:deep-equal($x, fn:namespace-uri-from-QName(fn:QName('uri', 'local'))) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-namespace-uri-for-prefix-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:namespace-uri-for-prefix(prefix := 'data', element := /doc)
            return fn:deep-equal($x, fn:namespace-uri-for-prefix('data', /doc)) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-in-scope-namespaces-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:in-scope-namespaces(element := /doc)
            return fn:deep-equal($x, fn:in-scope-namespaces(/doc)) and $x instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-in-scope-prefixes-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:in-scope-prefixes(element := /doc)
            return fn:deep-equal($x, fn:in-scope-prefixes(/doc)) and $x instance of xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-name-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:name(node := /doc)
            return fn:deep-equal($x, /doc!fn:name(/doc)) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-local-name-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:local-name(node := /doc)
            return fn:deep-equal($x, /doc!fn:local-name(/doc)) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-namespace-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:namespace-uri(node := /doc)
            return fn:deep-equal($x, /doc!fn:namespace-uri(/doc)) and $x instance of xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-number-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:number(value := "abc")
            return fn:deep-equal($x, /doc!fn:number("abc")) and $x instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-lang-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:lang(language := "abc", node := /doc)
            return fn:deep-equal($x, /doc!fn:lang("abc", /doc)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-path-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:path(node := /doc)
            return fn:deep-equal($x, /doc!fn:path(/doc)) and $x instance of xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-root-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:root(node := /doc)
            return fn:deep-equal($x, /doc!fn:root(/doc)) and $x instance of node()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-has-children-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:has-children(node := /doc)
            return fn:deep-equal($x, /doc!fn:has-children(/doc)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-innermost-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:innermost(nodes := /doc)
            return fn:deep-equal($x, fn:innermost(/doc)) and $x instance of node()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-outermost-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:outermost(nodes := /doc)
            return fn:deep-equal($x, fn:outermost(/doc)) and $x instance of node()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-index-of-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:index-of(input := ("abc", "def"), search := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:index-of(("abc", "def"), "abc", fn:default-collation())) and $x instance of xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-empty-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:empty(input := ("abc", "def"))
            return fn:deep-equal($x, fn:empty(("abc", "def"))) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-exists-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:exists(input := ("abc", "def"))
            return fn:deep-equal($x, fn:exists(("abc", "def"))) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-distinct-values-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:distinct-values(values := ("abc", "def"), collation := fn:default-collation())
            return fn:deep-equal($x, fn:distinct-values(("abc", "def"), fn:default-collation())) and $x instance of xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-identity-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:identity(input := ("abc", "def"))
            return fn:deep-equal($x, fn:identity(("abc", "def"))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-insert-before-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:insert-before(input := ("abc", "def"), position := 1, insert := ("abc", "def"))
            return fn:deep-equal($x, fn:insert-before(("abc", "def"), 1, ("abc", "def"))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-remove-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:remove(input := ("abc", "def"), positions := (1, 2))
            return fn:deep-equal($x, fn:remove(("abc", "def"), (1, 2))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-head-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:head(input := ("abc", "def"))
            return fn:deep-equal($x, fn:head(("abc", "def"))) and $x instance of item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-tail-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:tail(input := ("abc", "def"))
            return fn:deep-equal($x, fn:tail(("abc", "def"))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-trunk-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:trunk(input := ("abc", "def"))
            return fn:deep-equal($x, fn:trunk(("abc", "def"))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-replicate-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:replicate(input := ("abc", "def"), count := 1)
            return fn:deep-equal($x, fn:replicate(("abc", "def"), 1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-intersperse-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:intersperse(input := ("abc", "def"), separator := ("abc", "def"))
            return fn:deep-equal($x, fn:intersperse(("abc", "def"), ("abc", "def"))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-reverse-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:reverse(input := ("abc", "def"))
            return fn:deep-equal($x, fn:reverse(("abc", "def"))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-subsequence-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:subsequence(input := ("abc", "def"), start := 1, length := 1)
            return fn:deep-equal($x, fn:subsequence(("abc", "def"), 1, 1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-items-at-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:items-at(input := ("abc", "def"), at := (42, 43))
            return fn:deep-equal($x, fn:items-at(("abc", "def"), (42, 43))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-starts-with-sequence-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:starts-with-sequence(input := ("abc", "def"), subsequence := ("abc", "def"), compare := fn:deep-equal#2)
            return fn:deep-equal($x, fn:starts-with-sequence(("abc", "def"), ("abc", "def"), fn:deep-equal#2)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-ends-with-sequence-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:ends-with-sequence(input := ("abc", "def"), subsequence := ("abc", "def"), compare := fn:deep-equal#2)
            return fn:deep-equal($x, fn:ends-with-sequence(("abc", "def"), ("abc", "def"), fn:deep-equal#2)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-contains-sequence-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:contains-sequence(input := ("abc", "def"), subsequence := ("abc", "def"), compare := fn:deep-equal#2)
            return fn:deep-equal($x, fn:contains-sequence(("abc", "def"), ("abc", "def"), fn:deep-equal#2)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unordered-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:unordered(input := ("abc", "def"))
            return fn:deep-equal($x, fn:unordered(("abc", "def"))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-zero-or-one-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:zero-or-one(input := 0)
            return fn:deep-equal($x, fn:zero-or-one(0)) and $x instance of item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-one-or-more-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:one-or-more(input := ("abc", "def"))
            return fn:deep-equal($x, fn:one-or-more(("abc", "def"))) and $x instance of item()+</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-exactly-one-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:exactly-one(input := 0)
            return fn:deep-equal($x, fn:exactly-one(0)) and $x instance of item()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-deep-equal-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:deep-equal(input1 := ("abc", "def"), input2 := ("abc", "def"), collation := fn:default-collation(), options := map{})
            return fn:deep-equal($x, fn:deep-equal(("abc", "def"), ("abc", "def"), fn:default-collation(), map{})) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-count-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:count(input := ("abc", "def"))
            return fn:deep-equal($x, fn:count(("abc", "def"))) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-avg-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:avg(values := 0)
            return fn:deep-equal($x, fn:avg(0)) and $x instance of xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-max-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:max(values := ("abc", "def"), collation := fn:default-collation())
            return fn:deep-equal($x, fn:max(("abc", "def"), fn:default-collation())) and $x instance of xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-min-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:min(values := ("abc", "def"), collation := fn:default-collation())
            return fn:deep-equal($x, fn:min(("abc", "def"), fn:default-collation())) and $x instance of xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-sum-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:sum(values := 0, zero := 0)
            return fn:deep-equal($x, fn:sum(0, 0)) and $x instance of xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-id-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:id(values := ("abc", "def"), node := /doc)
            return fn:deep-equal($x, /doc!fn:id(("abc", "def"), /doc)) and $x instance of element()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-element-with-id-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:element-with-id(values := ("abc", "def"), node := /doc)
            return fn:deep-equal($x, /doc!fn:element-with-id(("abc", "def"), /doc)) and $x instance of element()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-idref-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:idref(values := ("abc", "def"), node := /doc)
            return fn:deep-equal($x, /doc!fn:idref(("abc", "def"), /doc)) and $x instance of node()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-doc-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:doc(href := 'BuiltInKeywords.xml')
            return fn:deep-equal($x, fn:doc('BuiltInKeywords.xml')) and $x instance of document-node()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-doc-available-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:doc-available(href := 'BuiltInKeywords.xml')
            return fn:deep-equal($x, fn:doc-available('BuiltInKeywords.xml')) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unparsed-text-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:unparsed-text(href := 'BuiltInKeywords.xml', encoding := 'utf-8')
            return fn:deep-equal($x, fn:unparsed-text('BuiltInKeywords.xml', 'utf-8')) and $x instance of xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unparsed-text-lines-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:unparsed-text-lines(href := 'BuiltInKeywords.xml', encoding := 'utf-8')
            return fn:deep-equal($x, fn:unparsed-text-lines('BuiltInKeywords.xml', 'utf-8')) and $x instance of xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unparsed-text-available-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:unparsed-text-available(href := 'BuiltInKeywords.xml', encoding := 'utf-8')
            return fn:deep-equal($x, fn:unparsed-text-available('BuiltInKeywords.xml', 'utf-8')) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-environment-variable-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:environment-variable(name := "abc")
            return fn:deep-equal($x, fn:environment-variable("abc")) and $x instance of xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-available-environment-variables-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:available-environment-variables()
            return fn:deep-equal($x, fn:available-environment-variables()) and $x instance of xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-generate-id-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:generate-id(node := /doc)
            return fn:deep-equal($x, /doc!fn:generate-id(/doc)) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-xml-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:parse-xml(value := '&lt;a/&gt;')
            return fn:deep-equal($x, fn:parse-xml('&lt;a/&gt;')) and $x instance of document-node(element(*))?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-xml-fragment-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:parse-xml-fragment(value := "abc")
            return fn:deep-equal($x, fn:parse-xml-fragment("abc")) and $x instance of document-node()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-serialize-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:serialize(input := ("abc", "def"), options := map{})
            return fn:deep-equal($x, fn:serialize(("abc", "def"), map{})) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-html-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:parse-html(html := 'data', options := )
            return fn:deep-equal($x, fn:parse-html('data', )) and $x instance of document-node(element(*:html))?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-position-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:position()
            return fn:deep-equal($x, fn:position()) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-last-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:last()
            return fn:deep-equal($x, fn:last()) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-current-dateTime-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:current-dateTime()
            return fn:deep-equal($x, fn:current-dateTime()) and $x instance of xs:dateTimeStamp</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-current-date-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:current-date()
            return fn:deep-equal($x, fn:current-date()) and $x instance of xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-current-time-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:current-time()
            return fn:deep-equal($x, fn:current-time()) and $x instance of xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-implicit-timezone-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:implicit-timezone()
            return fn:deep-equal($x, fn:implicit-timezone()) and $x instance of xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-default-collation-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:default-collation()
            return fn:deep-equal($x, fn:default-collation()) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-default-language-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:default-language()
            return fn:deep-equal($x, fn:default-language()) and $x instance of xs:language</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-static-base-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:static-base-uri()
            return fn:deep-equal($x, fn:static-base-uri()) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-function-lookup-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:function-lookup(name := fn:QName('uri', 'local'), arity := 1)
            return $x instance of function(*)?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-function-name-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:function-name(function := fn:boolean#1)
            return fn:deep-equal($x, fn:function-name(fn:boolean#1)) and $x instance of xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-function-arity-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:function-arity(function := fn:boolean#1)
            return fn:deep-equal($x, fn:function-arity(fn:boolean#1)) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-for-each-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:for-each(input := ("abc", "def"), action := fn:boolean#1)
            return fn:deep-equal($x, fn:for-each(("abc", "def"), fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-filter-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:filter(input := ("abc", "def"), predicate := fn:boolean#1)
            return fn:deep-equal($x, fn:filter(("abc", "def"), fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-fold-left-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:fold-left(input := ("abc", "def"), zero := ("abc", "def"), action := fn:deep-equal#2)
            return fn:deep-equal($x, fn:fold-left(("abc", "def"), ("abc", "def"), fn:deep-equal#2)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-fold-right-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:fold-right(input := ("abc", "def"), zero := ("abc", "def"), action := fn:deep-equal#2)
            return fn:deep-equal($x, fn:fold-right(("abc", "def"), ("abc", "def"), fn:deep-equal#2)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-iterate-while-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:iterate-while(input := ("abc", "def"), predicate := fn:boolean#1, action := fn:boolean#1)
            return fn:deep-equal($x, fn:iterate-while(("abc", "def"), fn:boolean#1, fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-for-each-pair-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:for-each-pair(input1 := ("abc", "def"), input2 := ("abc", "def"), action := fn:deep-equal#2)
            return fn:deep-equal($x, fn:for-each-pair(("abc", "def"), ("abc", "def"), fn:deep-equal#2)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-sort-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:sort(input := ("abc", "def"), collation := fn:default-collation(), key := fn:boolean#1)
            return fn:deep-equal($x, fn:sort(("abc", "def"), fn:default-collation(), fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-apply-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:apply(function := fn:boolean#1, arguments := [22])
            return fn:deep-equal($x, fn:apply(fn:boolean#1, [22])) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-op-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:op(operator := ',')
            return $x instance of function(item()*, item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-atomic-equal-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:atomic-equal(value1 := "abc", value2 := "abc")
            return fn:deep-equal($x, fn:atomic-equal("abc", "abc")) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-merge-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:merge(maps := map{}, options := map{})
            return fn:deep-equal($x, map:merge(map{}, map{})) and $x instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-keys-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:keys(map := map{})
            return fn:deep-equal($x, map:keys(map{})) and $x instance of xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-contains-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:contains(map := map{}, key := "abc")
            return fn:deep-equal($x, map:contains(map{}, "abc")) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-get-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:get(map := map{}, key := "abc", fallback := fn:boolean#1)
            return fn:deep-equal($x, map:get(map{}, "abc", fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-find-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:find(input := ("abc", "def"), key := "abc")
            return fn:deep-equal($x, map:find(("abc", "def"), "abc")) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-put-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:put(map := map{}, key := "abc", value := ("abc", "def"))
            return fn:deep-equal($x, map:put(map{}, "abc", ("abc", "def"))) and $x instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-entry-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:entry(key := "abc", value := ("abc", "def"))
            return fn:deep-equal($x, map:entry("abc", ("abc", "def"))) and $x instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-remove-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:remove(map := map{}, keys := ("abc", "def"))
            return fn:deep-equal($x, map:remove(map{}, ("abc", "def"))) and $x instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-for-each-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:for-each(map := map{}, action := fn:deep-equal#2)
            return fn:deep-equal($x, map:for-each(map{}, fn:deep-equal#2)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-filter-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:filter(map := map{}, predicate := fn:deep-equal#2)
            return fn:deep-equal($x, map:filter(map{}, fn:deep-equal#2)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-build-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:build(input := ("abc", "def"), key := fn:boolean#1, value := fn:boolean#1, combine := fn:deep-equal#2)
            return fn:deep-equal($x, map:build(("abc", "def"), fn:boolean#1, fn:boolean#1, fn:deep-equal#2)) and $x instance of map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-size-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := map:size(map := map{})
            return fn:deep-equal($x, map:size(map{})) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-collation-key-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:collation-key(value := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:collation-key("abc", fn:default-collation())) and $x instance of xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-json-to-xml-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:json-to-xml(json := '[42, 43]', options := map{})
            return fn:deep-equal($x, fn:json-to-xml('[42, 43]', map{})) and $x instance of document-node()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-xml-to-json-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:xml-to-json(node := (), options := map{})
            return fn:deep-equal($x, fn:xml-to-json((), map{})) and $x instance of xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-json-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:parse-json(json := '[42, 43]', options := map{})
            return fn:deep-equal($x, fn:parse-json('[42, 43]', map{})) and $x instance of item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-json-doc-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:json-doc(href := 'JSONTestSuite/test_parsing/y_number.json', options := map{})
            return fn:deep-equal($x, fn:json-doc('JSONTestSuite/test_parsing/y_number.json', map{})) and $x instance of item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-size-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:size(array := [1,2,3])
            return fn:deep-equal($x, array:size([1,2,3])) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-empty-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:empty(array := [1,2,3])
            return fn:deep-equal($x, array:empty([1,2,3])) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-exists-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:exists(array := [1,2,3])
            return fn:deep-equal($x, array:exists([1,2,3])) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-get-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:get(array := [1,2,3], position := 1, fallback := fn:boolean#1)
            return fn:deep-equal($x, array:get([1,2,3], 1, fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-put-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:put(array := [1,2,3], position := 1, member := ("abc", "def"))
            return fn:deep-equal($x, array:put([1,2,3], 1, ("abc", "def"))) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-append-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:append(array := [1,2,3], add := ("abc", "def"))
            return fn:deep-equal($x, array:append([1,2,3], ("abc", "def"))) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-join-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:join(arrays := [1,2,3])
            return fn:deep-equal($x, array:join([1,2,3])) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-subarray-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:subarray(array := [1,2,3], start := 1, length := 1)
            return fn:deep-equal($x, array:subarray([1,2,3], 1, 1)) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-index-where-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:index-where(array := [1,2,3], predicate := fn:boolean#1)
            return fn:deep-equal($x, array:index-where([1,2,3], fn:boolean#1)) and $x instance of xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-remove-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:remove(array := [1,2,3], positions := (1, 2))
            return fn:deep-equal($x, array:remove([1,2,3], (1, 2))) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-insert-before-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:insert-before(array := [1,2,3], position := 1, member := ("abc", "def"))
            return fn:deep-equal($x, array:insert-before([1,2,3], 1, ("abc", "def"))) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-head-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:head(array := [1,2,3])
            return fn:deep-equal($x, array:head([1,2,3])) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-tail-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:tail(array := [1,2,3])
            return fn:deep-equal($x, array:tail([1,2,3])) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-trunk-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:trunk(array := [1,2,3])
            return fn:deep-equal($x, array:trunk([1,2,3])) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-reverse-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:reverse(array := [1,2,3])
            return fn:deep-equal($x, array:reverse([1,2,3])) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-for-each-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:for-each(array := [1,2,3], action := fn:boolean#1)
            return fn:deep-equal($x, array:for-each([1,2,3], fn:boolean#1)) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-filter-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:filter(array := [1,2,3], predicate := fn:boolean#1)
            return fn:deep-equal($x, array:filter([1,2,3], fn:boolean#1)) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-fold-left-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:fold-left(array := [1,2,3], zero := ("abc", "def"), action := fn:deep-equal#2)
            return fn:deep-equal($x, array:fold-left([1,2,3], ("abc", "def"), fn:deep-equal#2)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-fold-right-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:fold-right(array := [1,2,3], zero := ("abc", "def"), action := fn:deep-equal#2)
            return fn:deep-equal($x, array:fold-right([1,2,3], ("abc", "def"), fn:deep-equal#2)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-for-each-pair-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:for-each-pair(array1 := [1,2,3], array2 := [1,2,3], action := fn:deep-equal#2)
            return fn:deep-equal($x, array:for-each-pair([1,2,3], [1,2,3], fn:deep-equal#2)) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-build-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:build(input := ("abc", "def"), action := fn:boolean#1)
            return fn:deep-equal($x, array:build(("abc", "def"), fn:boolean#1)) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-members-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:members(input := [1,2,3])
            return fn:deep-equal($x, array:members([1,2,3])) and $x instance of record(value as item()*)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-sort-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:sort(array := [1,2,3], collation := fn:default-collation(), key := fn:boolean#1)
            return fn:deep-equal($x, array:sort([1,2,3], fn:default-collation(), fn:boolean#1)) and $x instance of array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-flatten-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := array:flatten(input := ("abc", "def"))
            return fn:deep-equal($x, array:flatten(("abc", "def"))) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-all-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:all(input := ("abc", "def"), predicate := fn:boolean#1)
            return fn:deep-equal($x, fn:all(("abc", "def"), fn:boolean#1)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-char-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:char(name := "abc")
            return fn:deep-equal($x, fn:char("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-characters-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:characters(value := "abc")
            return fn:deep-equal($x, fn:characters("abc")) and $x instance of xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-highest-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:highest(input := ("abc", "def"), collation := fn:default-collation(), key := fn:boolean#1)
            return fn:deep-equal($x, fn:highest(("abc", "def"), fn:default-collation(), fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-index-where-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:index-where(input := ("abc", "def"), predicate := fn:boolean#1)
            return fn:deep-equal($x, fn:index-where(("abc", "def"), fn:boolean#1)) and $x instance of xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-is-NaN-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:is-NaN(value := "abc")
            return fn:deep-equal($x, fn:is-NaN("abc")) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-items-after-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:items-after(input := ("abc", "def"), predicate := fn:boolean#1)
            return fn:deep-equal($x, fn:items-after(("abc", "def"), fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-items-before-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:items-before(input := ("abc", "def"), predicate := fn:boolean#1)
            return fn:deep-equal($x, fn:items-before(("abc", "def"), fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-lowest-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:lowest(input := ("abc", "def"), collation := fn:default-collation(), key := fn:boolean#1)
            return fn:deep-equal($x, fn:lowest(("abc", "def"), fn:default-collation(), fn:boolean#1)) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-some-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:some(input := ("abc", "def"), predicate := fn:boolean#1)
            return fn:deep-equal($x, fn:some(("abc", "def"), fn:boolean#1)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-all-equal-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:all-equal(values := ("abc", "def"), collation := fn:default-collation())
            return fn:deep-equal($x, fn:all-equal(("abc", "def"), fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-all-different-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:all-different(values := ("abc", "def"), collation := fn:default-collation())
            return fn:deep-equal($x, fn:all-different(("abc", "def"), fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:parse-uri(uri := "abc", options := map{})
            return fn:deep-equal($x, fn:parse-uri("abc", map{})) and $x instance of </test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-build-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2023-04-06Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:build-uri(parts := , options := map{})
            return fn:deep-equal($x, fn:build-uri(, map{})) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
</test-set>

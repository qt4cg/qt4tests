<?xml version="1.0" encoding="UTF-8"?>
<!-- ************************************************** -->
<!-- * This file is generated automatically by the    * -->
<!-- * qtspecs build process. It is committed to the  * -->
<!-- * test repository automatically. Any changes you * -->
<!-- * make to this file will be lost on the next     * -->
<!-- * build. Have a nice day. The cake is a lie.     * -->
<!-- ************************************************** -->
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="misc-BuiltInKeywords"
          covers-40="PR197">
   <description>Tests for keyword argument names to built-in functions</description>
   <dependency type="spec" value="XP40+ XQ40+"/>
   <!--Generated using generate-keyword-test-set.xsl from function-catalog.xml at 2025-10-29T17:35:12.773114425Z-->
   <environment name="ka">
      <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
      <decimal-format name="data" decimal-separator="." grouping-separator=","/>
      <source role="." file="BuiltInKeywords/simple-doc.xml"/>
   </environment>
   <test-case name="Keywords-fn-node-name-1">
      <description>Test of keyword arguments in fn:node-name</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:node-name(node := ?) instance of function(node()?) as xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-type-of-1">
      <description>Test of keyword arguments in fn:type-of</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:type-of(value := ?) instance of function(item()*) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-nilled-1">
      <description>Test of keyword arguments in fn:nilled</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:nilled(node := ?) instance of function(node()?) as xs:boolean?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-1">
      <description>Test of keyword arguments in fn:string</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:string(value := ?) instance of function(item()?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-data-1">
      <description>Test of keyword arguments in fn:data</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:data(input := ?) instance of function(item()*) as xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-base-uri-1">
      <description>Test of keyword arguments in fn:base-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:base-uri(node := ?) instance of function(node()?) as xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-document-uri-1">
      <description>Test of keyword arguments in fn:document-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:document-uri(node := ?) instance of function(node()?) as xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-error-1">
      <description>Test of keyword arguments in fn:error</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:error(code := ?, description := ?, value := ?) instance of function(xs:QName?, xs:string?, item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-trace-1">
      <description>Test of keyword arguments in fn:trace</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:trace(input := ?, label := ?) instance of function(item()*, xs:string?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-message-1">
      <description>Test of keyword arguments in fn:message</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:message(input := ?, label := ?) instance of function(item()*, xs:string?) as empty-sequence()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-abs-1">
      <description>Test of keyword arguments in fn:abs</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:abs(value := ?) instance of function(xs:numeric?) as xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-ceiling-1">
      <description>Test of keyword arguments in fn:ceiling</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:ceiling(value := ?) instance of function(xs:numeric?) as xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-floor-1">
      <description>Test of keyword arguments in fn:floor</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:floor(value := ?) instance of function(xs:numeric?) as xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-round-1">
      <description>Test of keyword arguments in fn:round</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:round(value := ?, precision := ?, mode := ?) instance of function(xs:numeric?, xs:integer?, enum('floor',
 'ceiling',
                 'toward-zero',
 'away-from-zero',
 'half-to-floor',
                 'half-to-ceiling',
 'half-toward-zero',
 'half-away-from-zero',
 'half-to-even')?) as xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-round-half-to-even-1">
      <description>Test of keyword arguments in fn:round-half-to-even</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:round-half-to-even(value := ?, precision := ?) instance of function(xs:numeric?, xs:integer?) as xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-divide-decimals-1">
      <description>Test of keyword arguments in fn:divide-decimals</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:divide-decimals(value := ?, divisor := ?, precision := ?) instance of function(xs:decimal, xs:decimal, xs:integer?) as record(quotient as xs:decimal, remainder as xs:decimal)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-integer-1">
      <description>Test of keyword arguments in fn:format-integer</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:format-integer(value := ?, picture := ?, language := ?) instance of function(xs:integer?, xs:string, xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-number-1">
      <description>Test of keyword arguments in fn:format-number</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:format-number(value := ?, picture := ?, options := ?) instance of function(xs:numeric?, xs:string, (xs:string | map(*))?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-integer-1">
      <description>Test of keyword arguments in fn:parse-integer</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-integer(value := ?, radix := ?) instance of function(xs:string?, xs:integer?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-pi-1">
      <description>Test of keyword arguments in math:pi</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:pi#0 instance of function() as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-e-1">
      <description>Test of keyword arguments in math:e</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:e#0 instance of function() as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-exp-1">
      <description>Test of keyword arguments in math:exp</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:exp(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-exp10-1">
      <description>Test of keyword arguments in math:exp10</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:exp10(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-log-1">
      <description>Test of keyword arguments in math:log</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:log(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-log10-1">
      <description>Test of keyword arguments in math:log10</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:log10(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-sqrt-1">
      <description>Test of keyword arguments in math:sqrt</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:sqrt(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-pow-1">
      <description>Test of keyword arguments in math:pow</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:pow(x := ?, y := ?) instance of function(xs:double?, xs:numeric) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-sin-1">
      <description>Test of keyword arguments in math:sin</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:sin(radians := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-cos-1">
      <description>Test of keyword arguments in math:cos</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:cos(radians := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-tan-1">
      <description>Test of keyword arguments in math:tan</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:tan(radians := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-asin-1">
      <description>Test of keyword arguments in math:asin</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:asin(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-acos-1">
      <description>Test of keyword arguments in math:acos</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:acos(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-atan-1">
      <description>Test of keyword arguments in math:atan</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:atan(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-atan2-1">
      <description>Test of keyword arguments in math:atan2</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:atan2(y := ?, x := ?) instance of function(xs:double, xs:double) as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-sinh-1">
      <description>Test of keyword arguments in math:sinh</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:sinh(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-cosh-1">
      <description>Test of keyword arguments in math:cosh</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:cosh(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-tanh-1">
      <description>Test of keyword arguments in math:tanh</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>math:tanh(value := ?) instance of function(xs:double?) as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-codepoints-to-string-1">
      <description>Test of keyword arguments in fn:codepoints-to-string</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:codepoints-to-string(values := ?) instance of function(xs:integer*) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-to-codepoints-1">
      <description>Test of keyword arguments in fn:string-to-codepoints</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:string-to-codepoints(value := ?) instance of function(xs:string?) as xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-compare-1">
      <description>Test of keyword arguments in fn:compare</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:compare(value1 := ?, value2 := ?, collation := ?) instance of function(xs:anyAtomicType?, xs:anyAtomicType?, xs:string?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-codepoint-equal-1">
      <description>Test of keyword arguments in fn:codepoint-equal</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:codepoint-equal(value1 := ?, value2 := ?) instance of function(xs:string?, xs:string?) as xs:boolean?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-concat-1">
      <description>Test of keyword arguments in fn:concat</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:concat(values := ?) instance of function(xs:anyAtomicType*) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-join-1">
      <description>Test of keyword arguments in fn:string-join</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:string-join(values := ?, separator := ?) instance of function(xs:anyAtomicType*, xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-1">
      <description>Test of keyword arguments in fn:substring</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:substring(value := ?, start := ?, length := ?) instance of function(xs:string?, xs:double, xs:double?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-length-1">
      <description>Test of keyword arguments in fn:string-length</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:string-length(value := ?) instance of function(xs:string?) as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-normalize-space-1">
      <description>Test of keyword arguments in fn:normalize-space</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:normalize-space(value := ?) instance of function(xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-normalize-unicode-1">
      <description>Test of keyword arguments in fn:normalize-unicode</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:normalize-unicode(value := ?, form := ?) instance of function(xs:string?, xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-upper-case-1">
      <description>Test of keyword arguments in fn:upper-case</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:upper-case(value := ?) instance of function(xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-lower-case-1">
      <description>Test of keyword arguments in fn:lower-case</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:lower-case(value := ?) instance of function(xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-translate-1">
      <description>Test of keyword arguments in fn:translate</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:translate(value := ?, replace := ?, with := ?) instance of function(xs:string?, xs:string, xs:string) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-hash-1">
      <description>Test of keyword arguments in fn:hash</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:hash(value := ?, algorithm := ?, options := ?) instance of function((xs:string | xs:hexBinary | xs:base64Binary)?, xs:string?, map(*)?) as xs:hexBinary?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-encode-for-uri-1">
      <description>Test of keyword arguments in fn:encode-for-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:encode-for-uri(value := ?) instance of function(xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-decode-from-uri-1">
      <description>Test of keyword arguments in fn:decode-from-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:decode-from-uri(value := ?) instance of function(xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-iri-to-uri-1">
      <description>Test of keyword arguments in fn:iri-to-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:iri-to-uri(value := ?) instance of function(xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-escape-html-uri-1">
      <description>Test of keyword arguments in fn:escape-html-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:escape-html-uri(value := ?) instance of function(xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-contains-1">
      <description>Test of keyword arguments in fn:contains</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:contains(value := ?, substring := ?, collation := ?) instance of function(xs:string?, xs:string?, xs:string?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-starts-with-1">
      <description>Test of keyword arguments in fn:starts-with</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:starts-with(value := ?, substring := ?, collation := ?) instance of function(xs:string?, xs:string?, xs:string?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-ends-with-1">
      <description>Test of keyword arguments in fn:ends-with</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:ends-with(value := ?, substring := ?, collation := ?) instance of function(xs:string?, xs:string?, xs:string?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-before-1">
      <description>Test of keyword arguments in fn:substring-before</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:substring-before(value := ?, substring := ?, collation := ?) instance of function(xs:string?, xs:string?, xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-after-1">
      <description>Test of keyword arguments in fn:substring-after</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:substring-after(value := ?, substring := ?, collation := ?) instance of function(xs:string?, xs:string?, xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-matches-1">
      <description>Test of keyword arguments in fn:matches</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:matches(value := ?, pattern := ?, flags := ?) instance of function(xs:string?, xs:string, xs:string?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-replace-1">
      <description>Test of keyword arguments in fn:replace</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:replace(value := ?, pattern := ?, replacement := ?, flags := ?) instance of function(xs:string?, xs:string, (xs:string | fn(xs:untypedAtomic, xs:untypedAtomic*) as item()?)?, xs:string?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-tokenize-1">
      <description>Test of keyword arguments in fn:tokenize</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:tokenize(value := ?, pattern := ?, flags := ?) instance of function(xs:string?, xs:string?, xs:string?) as xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-analyze-string-1">
      <description>Test of keyword arguments in fn:analyze-string</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:analyze-string(value := ?, pattern := ?, flags := ?) instance of function(xs:string?, xs:string, xs:string?) as element(fn:analyze-string-result)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-contains-token-1">
      <description>Test of keyword arguments in fn:contains-token</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:contains-token(value := ?, token := ?, collation := ?) instance of function(xs:string*, xs:string, xs:string?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-resolve-uri-1">
      <description>Test of keyword arguments in fn:resolve-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:resolve-uri(href := ?, base := ?) instance of function(xs:string?, xs:string?) as xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-true-1">
      <description>Test of keyword arguments in fn:true</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:true#0 instance of function() as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-false-1">
      <description>Test of keyword arguments in fn:false</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:false#0 instance of function() as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-boolean-1">
      <description>Test of keyword arguments in fn:boolean</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:boolean(input := ?) instance of function(item()*) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-not-1">
      <description>Test of keyword arguments in fn:not</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:not(input := ?) instance of function(item()*) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-seconds-1">
      <description>Test of keyword arguments in fn:seconds</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:seconds(value := ?) instance of function(xs:decimal?) as xs:dayTimeDuration?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-years-from-duration-1">
      <description>Test of keyword arguments in fn:years-from-duration</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:years-from-duration(value := ?) instance of function(xs:duration?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-months-from-duration-1">
      <description>Test of keyword arguments in fn:months-from-duration</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:months-from-duration(value := ?) instance of function(xs:duration?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-days-from-duration-1">
      <description>Test of keyword arguments in fn:days-from-duration</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:days-from-duration(value := ?) instance of function(xs:duration?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-hours-from-duration-1">
      <description>Test of keyword arguments in fn:hours-from-duration</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:hours-from-duration(value := ?) instance of function(xs:duration?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-minutes-from-duration-1">
      <description>Test of keyword arguments in fn:minutes-from-duration</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:minutes-from-duration(value := ?) instance of function(xs:duration?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-seconds-from-duration-1">
      <description>Test of keyword arguments in fn:seconds-from-duration</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:seconds-from-duration(value := ?) instance of function(xs:duration?) as xs:decimal?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-dateTime-1">
      <description>Test of keyword arguments in fn:dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:dateTime(date := ?, time := ?) instance of function(xs:date?, xs:time?) as xs:dateTime?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unix-dateTime-1">
      <description>Test of keyword arguments in fn:unix-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:unix-dateTime(value := ?) instance of function(xs:nonNegativeInteger?) as xs:dateTimeStamp</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-year-from-dateTime-1">
      <description>Test of keyword arguments in fn:year-from-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:year-from-dateTime(value := ?) instance of function((xs:dateTime | xs:date | xs:time | xs:gYear | xs:gYearMonth | xs:gMonth | xs:gMonthDay | xs:gDay)?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-month-from-dateTime-1">
      <description>Test of keyword arguments in fn:month-from-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:month-from-dateTime(value := ?) instance of function((xs:dateTime | xs:date | xs:time | xs:gYear | xs:gYearMonth | xs:gMonth | xs:gMonthDay | xs:gDay)?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-day-from-dateTime-1">
      <description>Test of keyword arguments in fn:day-from-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:day-from-dateTime(value := ?) instance of function((xs:dateTime | xs:date | xs:time | xs:gYear | xs:gYearMonth | xs:gMonth | xs:gMonthDay | xs:gDay)?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-hours-from-dateTime-1">
      <description>Test of keyword arguments in fn:hours-from-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:hours-from-dateTime(value := ?) instance of function((xs:dateTime | xs:date | xs:time | xs:gYear | xs:gYearMonth | xs:gMonth | xs:gMonthDay | xs:gDay)?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-minutes-from-dateTime-1">
      <description>Test of keyword arguments in fn:minutes-from-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:minutes-from-dateTime(value := ?) instance of function((xs:dateTime | xs:date | xs:time | xs:gYear | xs:gYearMonth | xs:gMonth | xs:gMonthDay | xs:gDay)?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-seconds-from-dateTime-1">
      <description>Test of keyword arguments in fn:seconds-from-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:seconds-from-dateTime(value := ?) instance of function((xs:dateTime | xs:date | xs:time | xs:gYear | xs:gYearMonth | xs:gMonth | xs:gMonthDay | xs:gDay)?) as xs:decimal?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-timezone-from-dateTime-1">
      <description>Test of keyword arguments in fn:timezone-from-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:timezone-from-dateTime(value := ?) instance of function((xs:dateTime | xs:date | xs:time | xs:gYear | xs:gYearMonth | xs:gMonth | xs:gMonthDay | xs:gDay)?) as xs:dayTimeDuration?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-year-from-date-1">
      <description>Test of keyword arguments in fn:year-from-date</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:year-from-date(value := ?) instance of function(xs:date?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-month-from-date-1">
      <description>Test of keyword arguments in fn:month-from-date</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:month-from-date(value := ?) instance of function(xs:date?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-day-from-date-1">
      <description>Test of keyword arguments in fn:day-from-date</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:day-from-date(value := ?) instance of function(xs:date?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-timezone-from-date-1">
      <description>Test of keyword arguments in fn:timezone-from-date</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:timezone-from-date(value := ?) instance of function(xs:date?) as xs:dayTimeDuration?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-hours-from-time-1">
      <description>Test of keyword arguments in fn:hours-from-time</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:hours-from-time(value := ?) instance of function(xs:time?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-minutes-from-time-1">
      <description>Test of keyword arguments in fn:minutes-from-time</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:minutes-from-time(value := ?) instance of function(xs:time?) as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-seconds-from-time-1">
      <description>Test of keyword arguments in fn:seconds-from-time</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:seconds-from-time(value := ?) instance of function(xs:time?) as xs:decimal?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-timezone-from-time-1">
      <description>Test of keyword arguments in fn:timezone-from-time</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:timezone-from-time(value := ?) instance of function(xs:time?) as xs:dayTimeDuration?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-adjust-dateTime-to-timezone-1">
      <description>Test of keyword arguments in fn:adjust-dateTime-to-timezone</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:adjust-dateTime-to-timezone(value := ?, timezone := ?) instance of function(xs:dateTime?, xs:dayTimeDuration?) as xs:dateTime?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-adjust-date-to-timezone-1">
      <description>Test of keyword arguments in fn:adjust-date-to-timezone</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:adjust-date-to-timezone(value := ?, timezone := ?) instance of function(xs:date?, xs:dayTimeDuration?) as xs:date?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-adjust-time-to-timezone-1">
      <description>Test of keyword arguments in fn:adjust-time-to-timezone</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:adjust-time-to-timezone(value := ?, timezone := ?) instance of function(xs:time?, xs:dayTimeDuration?) as xs:time?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-civil-timezone-1">
      <description>Test of keyword arguments in fn:civil-timezone</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:civil-timezone(value := ?, place := ?) instance of function(xs:dateTime, xs:string) as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-dateTime-1">
      <description>Test of keyword arguments in fn:format-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:format-dateTime(value := ?, picture := ?, language := ?, calendar := ?, place := ?) instance of function(xs:dateTime?, xs:string, xs:string?, xs:string?, xs:string?) as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-date-1">
      <description>Test of keyword arguments in fn:format-date</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:format-date(value := ?, picture := ?, language := ?, calendar := ?, place := ?) instance of function(xs:date?, xs:string, xs:string?, xs:string?, xs:string?) as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-time-1">
      <description>Test of keyword arguments in fn:format-time</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:format-time(value := ?, picture := ?, language := ?, calendar := ?, place := ?) instance of function(xs:time?, xs:string, xs:string?, xs:string?, xs:string?) as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-ietf-date-1">
      <description>Test of keyword arguments in fn:parse-ietf-date</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-ietf-date(value := ?) instance of function(xs:string?) as xs:dateTime?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-resolve-QName-1">
      <description>Test of keyword arguments in fn:resolve-QName</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:resolve-QName(value := ?, element := ?) instance of function(xs:string?, element()) as xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-QName-1">
      <description>Test of keyword arguments in fn:QName</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:QName(uri := ?, qname := ?) instance of function(xs:string?, xs:string) as xs:QName</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-QName-1">
      <description>Test of keyword arguments in fn:parse-QName</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-QName(value := ?) instance of function(xs:string?) as xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-expanded-QName-1">
      <description>Test of keyword arguments in fn:expanded-QName</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:expanded-QName(value := ?) instance of function(xs:QName?) as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-prefix-from-QName-1">
      <description>Test of keyword arguments in fn:prefix-from-QName</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:prefix-from-QName(value := ?) instance of function(xs:QName?) as xs:NCName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-local-name-from-QName-1">
      <description>Test of keyword arguments in fn:local-name-from-QName</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:local-name-from-QName(value := ?) instance of function(xs:QName?) as xs:NCName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-namespace-uri-from-QName-1">
      <description>Test of keyword arguments in fn:namespace-uri-from-QName</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:namespace-uri-from-QName(value := ?) instance of function(xs:QName?) as xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-namespace-uri-for-prefix-1">
      <description>Test of keyword arguments in fn:namespace-uri-for-prefix</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:namespace-uri-for-prefix(value := ?, element := ?) instance of function((xs:NCName | enum(''))?, element()) as xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-in-scope-namespaces-1">
      <description>Test of keyword arguments in fn:in-scope-namespaces</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:in-scope-namespaces(element := ?) instance of function(element()) as map((xs:NCName | enum('')), xs:anyURI)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-in-scope-prefixes-1">
      <description>Test of keyword arguments in fn:in-scope-prefixes</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:in-scope-prefixes(element := ?) instance of function(element()) as xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-name-1">
      <description>Test of keyword arguments in fn:name</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:name(node := ?) instance of function(node()?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-local-name-1">
      <description>Test of keyword arguments in fn:local-name</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:local-name(node := ?) instance of function(node()?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-namespace-uri-1">
      <description>Test of keyword arguments in fn:namespace-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:namespace-uri(node := ?) instance of function(node()?) as xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-number-1">
      <description>Test of keyword arguments in fn:number</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:number(value := ?) instance of function(xs:anyAtomicType?) as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-lang-1">
      <description>Test of keyword arguments in fn:lang</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:lang(language := ?, node := ?) instance of function(xs:string?, node()) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-path-1">
      <description>Test of keyword arguments in fn:path</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:path(node := ?, options := ?) instance of function(gnode()?, map(*)?) as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-root-1">
      <description>Test of keyword arguments in fn:root</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:root(node := ?) instance of function(gnode()?) as gnode()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-has-children-1">
      <description>Test of keyword arguments in fn:has-children</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:has-children(node := ?) instance of function(gnode()?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-distinct-ordered-nodes-1">
      <description>Test of keyword arguments in fn:distinct-ordered-nodes</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:distinct-ordered-nodes(nodes := ?) instance of function(gnode()*) as gnode()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-innermost-1">
      <description>Test of keyword arguments in fn:innermost</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:innermost(nodes := ?) instance of function(gnode()*) as gnode()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-outermost-1">
      <description>Test of keyword arguments in fn:outermost</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:outermost(nodes := ?) instance of function(gnode()*) as gnode()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-index-of-1">
      <description>Test of keyword arguments in fn:index-of</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:index-of(input := ?, target := ?, collation := ?) instance of function(xs:anyAtomicType*, xs:anyAtomicType, xs:string?) as xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-empty-1">
      <description>Test of keyword arguments in fn:empty</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:empty(input := ?) instance of function(item()*) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-siblings-1">
      <description>Test of keyword arguments in fn:siblings</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:siblings(node := ?) instance of function(gnode()?) as gnode()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-exists-1">
      <description>Test of keyword arguments in fn:exists</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:exists(input := ?) instance of function(item()*) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-distinct-values-1">
      <description>Test of keyword arguments in fn:distinct-values</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:distinct-values(values := ?, collation := ?) instance of function(xs:anyAtomicType*, xs:string?) as xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-duplicate-values-1">
      <description>Test of keyword arguments in fn:duplicate-values</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:duplicate-values(values := ?, collation := ?) instance of function(xs:anyAtomicType*, xs:string?) as xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-identity-1">
      <description>Test of keyword arguments in fn:identity</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:identity(input := ?) instance of function(item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-insert-before-1">
      <description>Test of keyword arguments in fn:insert-before</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:insert-before(input := ?, position := ?, insert := ?) instance of function(item()*, xs:integer, item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-remove-1">
      <description>Test of keyword arguments in fn:remove</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:remove(input := ?, positions := ?) instance of function(item()*, xs:integer*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-head-1">
      <description>Test of keyword arguments in fn:head</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:head(input := ?) instance of function(item()*) as item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-tail-1">
      <description>Test of keyword arguments in fn:tail</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:tail(input := ?) instance of function(item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-trunk-1">
      <description>Test of keyword arguments in fn:trunk</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:trunk(input := ?) instance of function(item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-replicate-1">
      <description>Test of keyword arguments in fn:replicate</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:replicate(input := ?, count := ?) instance of function(item()*, xs:nonNegativeInteger) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-sequence-join-1">
      <description>Test of keyword arguments in fn:sequence-join</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:sequence-join(input := ?, separator := ?) instance of function(item()*, item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-foot-1">
      <description>Test of keyword arguments in fn:foot</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:foot(input := ?) instance of function(item()*) as item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-reverse-1">
      <description>Test of keyword arguments in fn:reverse</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:reverse(input := ?) instance of function(item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-subsequence-1">
      <description>Test of keyword arguments in fn:subsequence</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:subsequence(input := ?, start := ?, length := ?) instance of function(item()*, xs:double, xs:double?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-subsequence-where-1">
      <description>Test of keyword arguments in fn:subsequence-where</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:subsequence-where(input := ?, from := ?, to := ?) instance of function(item()*, (fn(item(), xs:integer) as xs:boolean?)?, (fn(item(), xs:integer) as xs:boolean?)?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-items-at-1">
      <description>Test of keyword arguments in fn:items-at</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:items-at(input := ?, at := ?) instance of function(item()*, xs:integer*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-slice-1">
      <description>Test of keyword arguments in fn:slice</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:slice(input := ?, start := ?, end := ?, step := ?) instance of function(item()*, xs:integer?, xs:integer?, xs:integer?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-starts-with-subsequence-1">
      <description>Test of keyword arguments in fn:starts-with-subsequence</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:starts-with-subsequence(input := ?, subsequence := ?, compare := ?) instance of function(item()*, item()*, (fn(item(), item()) as xs:boolean?)?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-ends-with-subsequence-1">
      <description>Test of keyword arguments in fn:ends-with-subsequence</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:ends-with-subsequence(input := ?, subsequence := ?, compare := ?) instance of function(item()*, item()*, (fn(item(), item()) as xs:boolean?)?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-contains-subsequence-1">
      <description>Test of keyword arguments in fn:contains-subsequence</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:contains-subsequence(input := ?, subsequence := ?, compare := ?) instance of function(item()*, item()*, (fn(item(), item()) as xs:boolean?)?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unordered-1">
      <description>Test of keyword arguments in fn:unordered</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:unordered(input := ?) instance of function(item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-void-1">
      <description>Test of keyword arguments in fn:void</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:void(input := ?) instance of function(item()*) as empty-sequence()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-zero-or-one-1">
      <description>Test of keyword arguments in fn:zero-or-one</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:zero-or-one(input := ?) instance of function(item()*) as item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-one-or-more-1">
      <description>Test of keyword arguments in fn:one-or-more</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:one-or-more(input := ?) instance of function(item()*) as item()+</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-exactly-one-1">
      <description>Test of keyword arguments in fn:exactly-one</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:exactly-one(input := ?) instance of function(item()*) as item()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-deep-equal-1">
      <description>Test of keyword arguments in fn:deep-equal</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:deep-equal(input1 := ?, input2 := ?, options := ?) instance of function(item()*, item()*, (xs:string | map(*))?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-count-1">
      <description>Test of keyword arguments in fn:count</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:count(input := ?) instance of function(item()*) as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-avg-1">
      <description>Test of keyword arguments in fn:avg</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:avg(values := ?) instance of function(xs:anyAtomicType*) as xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-max-1">
      <description>Test of keyword arguments in fn:max</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:max(values := ?, collation := ?) instance of function(xs:anyAtomicType*, xs:string?) as xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-min-1">
      <description>Test of keyword arguments in fn:min</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:min(values := ?, collation := ?) instance of function(xs:anyAtomicType*, xs:string?) as xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-sum-1">
      <description>Test of keyword arguments in fn:sum</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:sum(values := ?, zero := ?) instance of function(xs:anyAtomicType*, xs:anyAtomicType?) as xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-id-1">
      <description>Test of keyword arguments in fn:id</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:id(values := ?, node := ?) instance of function(xs:string*, node()) as element()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-element-with-id-1">
      <description>Test of keyword arguments in fn:element-with-id</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:element-with-id(values := ?, node := ?) instance of function(xs:string*, node()) as element()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-idref-1">
      <description>Test of keyword arguments in fn:idref</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:idref(values := ?, node := ?) instance of function(xs:string*, node()) as node()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-doc-1">
      <description>Test of keyword arguments in fn:doc</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:doc(source := ?, options := ?) instance of function(xs:string?, map(*)?) as document-node()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-doc-available-1">
      <description>Test of keyword arguments in fn:doc-available</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:doc-available(source := ?, options := ?) instance of function(xs:string?, map(*)?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-collection-1">
      <description>Test of keyword arguments in fn:collection</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:collection(source := ?) instance of function(xs:string?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-uri-collection-1">
      <description>Test of keyword arguments in fn:uri-collection</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:uri-collection(source := ?) instance of function(xs:string?) as xs:anyURI*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unparsed-text-1">
      <description>Test of keyword arguments in fn:unparsed-text</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:unparsed-text(source := ?, options := ?) instance of function(xs:string?, (xs:string | map(*))?) as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unparsed-text-lines-1">
      <description>Test of keyword arguments in fn:unparsed-text-lines</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:unparsed-text-lines(source := ?, options := ?) instance of function(xs:string?, (xs:string | map(*))?) as xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unparsed-text-available-1">
      <description>Test of keyword arguments in fn:unparsed-text-available</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:unparsed-text-available(source := ?, options := ?) instance of function(xs:string?, (xs:string | map(*))?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-unparsed-binary-1">
      <description>Test of keyword arguments in fn:unparsed-binary</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:unparsed-binary(source := ?) instance of function(xs:string?) as xs:base64Binary?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-environment-variable-1">
      <description>Test of keyword arguments in fn:environment-variable</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:environment-variable(name := ?) instance of function(xs:string) as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-available-environment-variables-1">
      <description>Test of keyword arguments in fn:available-environment-variables</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:available-environment-variables#0 instance of function() as xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-generate-id-1">
      <description>Test of keyword arguments in fn:generate-id</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:generate-id(node := ?) instance of function(gnode()?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-xml-1">
      <description>Test of keyword arguments in fn:parse-xml</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-xml(value := ?, options := ?) instance of function((xs:string | xs:hexBinary | xs:base64Binary)?, map(*)?) as document-node(*)?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-xml-fragment-1">
      <description>Test of keyword arguments in fn:parse-xml-fragment</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-xml-fragment(value := ?, options := ?) instance of function((xs:string | xs:hexBinary | xs:base64Binary)?, map(*)?) as document-node()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-xsd-validator-1">
      <description>Test of keyword arguments in fn:xsd-validator</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:xsd-validator(options := ?) instance of function(map(*)?) as function((document-node(*) | element(*) | attribute(*))?) as record(is-valid as xs:boolean, typed-node? as node(), error-details? as record(*)*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-serialize-1">
      <description>Test of keyword arguments in fn:serialize</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:serialize(input := ?, options := ?) instance of function(item()*, (element(output:serialization-parameters) | map(*))?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-html-1">
      <description>Test of keyword arguments in fn:parse-html</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-html(value := ?, options := ?) instance of function((xs:string | xs:hexBinary | xs:base64Binary)?, map(*)?) as document-node(*:html)?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-html-doc-1">
      <description>Test of keyword arguments in fn:html-doc</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:html-doc(source := ?, options := ?) instance of function(xs:string?, map(*)?) as document-node(*:html)?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-position-1">
      <description>Test of keyword arguments in fn:position</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:position#0 instance of function() as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-last-1">
      <description>Test of keyword arguments in fn:last</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:last#0 instance of function() as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-current-dateTime-1">
      <description>Test of keyword arguments in fn:current-dateTime</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:current-dateTime#0 instance of function() as xs:dateTimeStamp</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-current-date-1">
      <description>Test of keyword arguments in fn:current-date</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:current-date#0 instance of function() as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-current-time-1">
      <description>Test of keyword arguments in fn:current-time</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:current-time#0 instance of function() as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-implicit-timezone-1">
      <description>Test of keyword arguments in fn:implicit-timezone</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:implicit-timezone#0 instance of function() as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-default-collation-1">
      <description>Test of keyword arguments in fn:default-collation</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:default-collation#0 instance of function() as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-default-language-1">
      <description>Test of keyword arguments in fn:default-language</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:default-language#0 instance of function() as xs:language</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-static-base-uri-1">
      <description>Test of keyword arguments in fn:static-base-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:static-base-uri#0 instance of function() as xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-function-lookup-1">
      <description>Test of keyword arguments in fn:function-lookup</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:function-lookup(name := ?, arity := ?) instance of function(xs:QName, xs:integer) as fn(*)?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-function-name-1">
      <description>Test of keyword arguments in fn:function-name</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:function-name(function := ?) instance of function(fn(*)) as xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-function-arity-1">
      <description>Test of keyword arguments in fn:function-arity</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:function-arity(function := ?) instance of function(fn(*)) as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-function-identity-1">
      <description>Test of keyword arguments in fn:function-identity</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:function-identity(function := ?) instance of function(fn(*)) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-function-annotations-1">
      <description>Test of keyword arguments in fn:function-annotations</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:function-annotations(function := ?) instance of function(fn(*)) as map(xs:QName, xs:anyAtomicType*)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-for-each-1">
      <description>Test of keyword arguments in fn:for-each</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:for-each(input := ?, action := ?) instance of function(item()*, fn(item(), xs:integer) as item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-filter-1">
      <description>Test of keyword arguments in fn:filter</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:filter(input := ?, predicate := ?) instance of function(item()*, fn(item(), xs:integer) as xs:boolean?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-fold-left-1">
      <description>Test of keyword arguments in fn:fold-left</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:fold-left(input := ?, init := ?, action := ?) instance of function(item()*, item()*, fn(item()*, item()) as item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-fold-right-1">
      <description>Test of keyword arguments in fn:fold-right</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:fold-right(input := ?, init := ?, action := ?) instance of function(item()*, item()*, fn(item(), item()*) as item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-while-do-1">
      <description>Test of keyword arguments in fn:while-do</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:while-do(input := ?, predicate := ?, action := ?) instance of function(item()*, fn(item()*, xs:integer) as xs:boolean?, fn(item()*, xs:integer) as item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-do-until-1">
      <description>Test of keyword arguments in fn:do-until</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:do-until(input := ?, action := ?, predicate := ?) instance of function(item()*, fn(item()*, xs:integer) as item()*, fn(item()*, xs:integer) as xs:boolean?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-for-each-pair-1">
      <description>Test of keyword arguments in fn:for-each-pair</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:for-each-pair(input1 := ?, input2 := ?, action := ?) instance of function(item()*, item()*, fn(item(), item(), xs:integer) as item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-sort-1">
      <description>Test of keyword arguments in fn:sort</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:sort(input := ?, collation := ?, key := ?) instance of function(item()*, xs:string?, fn(item()) as xs:anyAtomicType*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-sort-by-1">
      <description>Test of keyword arguments in fn:sort-by</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:sort-by(input := ?, keys := ?) instance of function(item()*, record(key? as (fn(item()) as xs:anyAtomicType*)?, collation? as xs:string?, order? as enum('ascending', 'descending')?)*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-sort-with-1">
      <description>Test of keyword arguments in fn:sort-with</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:sort-with(input := ?, comparators := ?) instance of function(item()*, (fn(item(), item()) as xs:integer)+) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-transitive-closure-1">
      <description>Test of keyword arguments in fn:transitive-closure</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:transitive-closure(node := ?, step := ?) instance of function(gnode()?, fn(gnode()) as gnode()*) as gnode()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-apply-1">
      <description>Test of keyword arguments in fn:apply</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:apply(function := ?, arguments := ?) instance of function(fn(*), array(*)) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-partial-apply-1">
      <description>Test of keyword arguments in fn:partial-apply</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:partial-apply(function := ?, arguments := ?) instance of function(fn(*), map(xs:positiveInteger, item()*)) as fn(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-op-1">
      <description>Test of keyword arguments in fn:op</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:op(operator := ?) instance of function(xs:string) as fn(item()*, item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-atomic-type-annotation-1">
      <description>Test of keyword arguments in fn:atomic-type-annotation</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:atomic-type-annotation(value := ?) instance of function(xs:anyAtomicType) as fn:schema-type-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-node-type-annotation-1">
      <description>Test of keyword arguments in fn:node-type-annotation</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:node-type-annotation(node := ?) instance of function((element() | attribute())) as fn:schema-type-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-schema-type-1">
      <description>Test of keyword arguments in fn:schema-type</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:schema-type(name := ?) instance of function(xs:QName) as fn:schema-type-record?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-atomic-equal-1">
      <description>Test of keyword arguments in fn:atomic-equal</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:atomic-equal(value1 := ?, value2 := ?) instance of function(xs:anyAtomicType, xs:anyAtomicType) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-merge-1">
      <description>Test of keyword arguments in map:merge</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:merge(maps := ?, options := ?) instance of function(map(*)*, map(*)?) as map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-keys-1">
      <description>Test of keyword arguments in map:keys</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:keys(map := ?) instance of function(map(*)) as xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-keys-where-1">
      <description>Test of keyword arguments in map:keys-where</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:keys-where(map := ?, predicate := ?) instance of function(map(*), fn($key as xs:anyAtomicType, $value as item()*) as xs:boolean?) as xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-items-1">
      <description>Test of keyword arguments in map:items</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:items(map := ?) instance of function(map(*)) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-entries-1">
      <description>Test of keyword arguments in map:entries</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:entries(map := ?) instance of function(map(*)) as map(*)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-contains-1">
      <description>Test of keyword arguments in map:contains</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:contains(map := ?, key := ?) instance of function(map(*), xs:anyAtomicType) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-empty-1">
      <description>Test of keyword arguments in map:empty</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:empty(map := ?) instance of function(map(*)) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-get-1">
      <description>Test of keyword arguments in map:get</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:get(map := ?, key := ?, default := ?) instance of function(map(*), xs:anyAtomicType, item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-find-1">
      <description>Test of keyword arguments in map:find</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:find(input := ?, key := ?) instance of function(item()*, xs:anyAtomicType) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-put-1">
      <description>Test of keyword arguments in map:put</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:put(map := ?, key := ?, value := ?) instance of function(map(*), xs:anyAtomicType, item()*) as map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-entry-1">
      <description>Test of keyword arguments in map:entry</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:entry(key := ?, value := ?) instance of function(xs:anyAtomicType, item()*) as map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-remove-1">
      <description>Test of keyword arguments in map:remove</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:remove(map := ?, keys := ?) instance of function(map(*), xs:anyAtomicType*) as map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-for-each-1">
      <description>Test of keyword arguments in map:for-each</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:for-each(map := ?, action := ?) instance of function(map(*), fn($key as xs:anyAtomicType, $value as item()*, $position as xs:integer) as item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-filter-1">
      <description>Test of keyword arguments in map:filter</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:filter(map := ?, predicate := ?) instance of function(map(*), fn($key as xs:anyAtomicType, $value as item()*, $position as xs:integer) as xs:boolean?) as map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-build-1">
      <description>Test of keyword arguments in map:build</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:build(input := ?, key := ?, value := ?, options := ?) instance of function(item()*, (fn($item as item(), $position as xs:integer) as xs:anyAtomicType*)?, (fn($item as item(), $position as xs:integer) as item()*)?, map(*)?) as map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-map-size-1">
      <description>Test of keyword arguments in map:size</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>map:size(map := ?) instance of function(map(*)) as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-collation-1">
      <description>Test of keyword arguments in fn:collation</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:collation(options := ?) instance of function(map(*)) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-collation-available-1">
      <description>Test of keyword arguments in fn:collation-available</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:collation-available(collation := ?, usage := ?) instance of function(xs:string, enum('compare', 'key', 'substring')*) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-collation-key-1">
      <description>Test of keyword arguments in fn:collation-key</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:collation-key(value := ?, collation := ?) instance of function(xs:string, xs:string?) as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-json-to-xml-1">
      <description>Test of keyword arguments in fn:json-to-xml</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:json-to-xml(value := ?, options := ?) instance of function(xs:string?, map(*)?) as document-node(fn:*)?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-xml-to-json-1">
      <description>Test of keyword arguments in fn:xml-to-json</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:xml-to-json(node := ?, options := ?) instance of function(node()?, map(*)?) as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-element-to-map-plan-1">
      <description>Test of keyword arguments in fn:element-to-map-plan</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:element-to-map-plan(input := ?) instance of function((document-node() | element(*))*) as map(xs:string, record(*))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-element-to-map-1">
      <description>Test of keyword arguments in fn:element-to-map</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:element-to-map(element := ?, options := ?) instance of function(element()?, map(*)?) as map(xs:string, item()?)?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-csv-1">
      <description>Test of keyword arguments in fn:parse-csv</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-csv(value := ?, options := ?) instance of function(xs:string?, map(*)?) as fn:parsed-csv-structure-record?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-csv-doc-1">
      <description>Test of keyword arguments in fn:csv-doc</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:csv-doc(source := ?, options := ?) instance of function(xs:string?, map(*)?) as parsed-csv-structure-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-csv-to-arrays-1">
      <description>Test of keyword arguments in fn:csv-to-arrays</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:csv-to-arrays(value := ?, options := ?) instance of function(xs:string?, map(*)?) as array(xs:string)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-csv-to-xml-1">
      <description>Test of keyword arguments in fn:csv-to-xml</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:csv-to-xml(value := ?, options := ?) instance of function(xs:string?, map(*)?) as document-node(fn:csv)?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-json-1">
      <description>Test of keyword arguments in fn:parse-json</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-json(value := ?, options := ?) instance of function(xs:string?, map(*)?) as item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-json-doc-1">
      <description>Test of keyword arguments in fn:json-doc</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:json-doc(source := ?, options := ?) instance of function(xs:string?, map(*)?) as item()?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-size-1">
      <description>Test of keyword arguments in array:size</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:size(array := ?) instance of function(array(*)) as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-empty-1">
      <description>Test of keyword arguments in array:empty</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:empty(array := ?) instance of function(array(*)) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-get-1">
      <description>Test of keyword arguments in array:get</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:get(array := ?, position := ?) instance of function(array(*), xs:integer) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-get-2">
      <description>Test of keyword arguments in array:get</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:get(array := ?, position := ?, default := ?) instance of function(array(*), xs:integer, item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-put-1">
      <description>Test of keyword arguments in array:put</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:put(array := ?, position := ?, member := ?) instance of function(array(*), xs:integer, item()*) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-append-1">
      <description>Test of keyword arguments in array:append</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:append(array := ?, member := ?) instance of function(array(*), item()*) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-join-1">
      <description>Test of keyword arguments in array:join</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:join(arrays := ?, separator := ?) instance of function(array(*)*, array(*)?) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-subarray-1">
      <description>Test of keyword arguments in array:subarray</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:subarray(array := ?, start := ?, length := ?) instance of function(array(*), xs:integer, xs:integer?) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-index-of-1">
      <description>Test of keyword arguments in array:index-of</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:index-of(array := ?, target := ?, collation := ?) instance of function(array(*), item()*, xs:string?) as xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-index-where-1">
      <description>Test of keyword arguments in array:index-where</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:index-where(array := ?, predicate := ?) instance of function(array(*), fn(item()*, xs:integer) as xs:boolean?) as xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-slice-1">
      <description>Test of keyword arguments in array:slice</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:slice(array := ?, start := ?, end := ?, step := ?) instance of function(array(*), xs:integer?, xs:integer?, xs:integer?) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-remove-1">
      <description>Test of keyword arguments in array:remove</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:remove(array := ?, positions := ?) instance of function(array(*), xs:integer*) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-insert-before-1">
      <description>Test of keyword arguments in array:insert-before</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:insert-before(array := ?, position := ?, member := ?) instance of function(array(*), xs:integer, item()*) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-head-1">
      <description>Test of keyword arguments in array:head</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:head(array := ?) instance of function(array(*)) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-foot-1">
      <description>Test of keyword arguments in array:foot</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:foot(array := ?) instance of function(array(*)) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-tail-1">
      <description>Test of keyword arguments in array:tail</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:tail(array := ?) instance of function(array(*)) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-trunk-1">
      <description>Test of keyword arguments in array:trunk</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:trunk(array := ?) instance of function(array(*)) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-reverse-1">
      <description>Test of keyword arguments in array:reverse</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:reverse(array := ?) instance of function(array(*)) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-for-each-1">
      <description>Test of keyword arguments in array:for-each</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:for-each(array := ?, action := ?) instance of function(array(*), fn(item()*, xs:integer) as item()*) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-filter-1">
      <description>Test of keyword arguments in array:filter</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:filter(array := ?, predicate := ?) instance of function(array(*), fn(item()*, xs:integer) as xs:boolean?) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-fold-left-1">
      <description>Test of keyword arguments in array:fold-left</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:fold-left(array := ?, init := ?, action := ?) instance of function(array(*), item()*, fn(item()*, item()*) as item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-fold-right-1">
      <description>Test of keyword arguments in array:fold-right</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:fold-right(array := ?, init := ?, action := ?) instance of function(array(*), item()*, fn(item()*, item()*) as item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-for-each-pair-1">
      <description>Test of keyword arguments in array:for-each-pair</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:for-each-pair(array1 := ?, array2 := ?, action := ?) instance of function(array(*), array(*), fn(item()*, item()*, xs:integer) as item()*) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-build-1">
      <description>Test of keyword arguments in array:build</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:build(input := ?, action := ?) instance of function(item()*, (fn(item(), xs:integer) as item()*)?) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-members-1">
      <description>Test of keyword arguments in array:members</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:members(array := ?) instance of function(array(*)) as record(value as item()*)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-split-1">
      <description>Test of keyword arguments in array:split</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:split(array := ?) instance of function(array(*)) as array(*)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-of-members-1">
      <description>Test of keyword arguments in array:of-members</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:of-members(input := ?) instance of function(record(value as item()*)*) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-sort-1">
      <description>Test of keyword arguments in array:sort</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:sort(array := ?, collation := ?, key := ?) instance of function(array(*), xs:string?, fn(item()*) as xs:anyAtomicType*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-sort-by-1">
      <description>Test of keyword arguments in array:sort-by</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:sort-by(array := ?, keys := ?) instance of function(item()*, record(key? as (fn(item()*) as xs:anyAtomicType*)?, collation? as xs:string?, order? as enum('ascending', 'descending')?)*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-sort-with-1">
      <description>Test of keyword arguments in array:sort-with</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:sort-with(input := ?, comparators := ?) instance of function(array(*), (fn(item()*, item()*) as xs:integer)+) as array(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-flatten-1">
      <description>Test of keyword arguments in array:flatten</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:flatten(input := ?) instance of function(item()*) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-array-items-1">
      <description>Test of keyword arguments in array:items</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>array:items(array := ?) instance of function(array(*)) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-load-xquery-module-1">
      <description>Test of keyword arguments in fn:load-xquery-module</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:load-xquery-module(module-uri := ?, options := ?) instance of function(xs:string, map(*)?) as fn:load-xquery-module-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-transform-1">
      <description>Test of keyword arguments in fn:transform</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:transform(options := ?) instance of function(map(*)) as map(*)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-random-number-generator-1">
      <description>Test of keyword arguments in fn:random-number-generator</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:random-number-generator(seed := ?) instance of function(xs:anyAtomicType?) as fn:random-number-generator-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-every-1">
      <description>Test of keyword arguments in fn:every</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:every(input := ?, predicate := ?) instance of function(item()*, (fn(item(), xs:integer) as xs:boolean?)?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-char-1">
      <description>Test of keyword arguments in fn:char</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:char(value := ?) instance of function((xs:string | xs:positiveInteger)) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-characters-1">
      <description>Test of keyword arguments in fn:characters</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:characters(value := ?) instance of function(xs:string?) as xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-graphemes-1">
      <description>Test of keyword arguments in fn:graphemes</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:graphemes(value := ?) instance of function(xs:string?) as xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-highest-1">
      <description>Test of keyword arguments in fn:highest</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:highest(input := ?, collation := ?, key := ?) instance of function(item()*, xs:string?, (fn(item()) as xs:anyAtomicType*)?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-index-where-1">
      <description>Test of keyword arguments in fn:index-where</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:index-where(input := ?, predicate := ?) instance of function(item()*, fn(item(), xs:integer) as xs:boolean?) as xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-is-NaN-1">
      <description>Test of keyword arguments in fn:is-NaN</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:is-NaN(value := ?) instance of function(xs:anyAtomicType) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-take-while-1">
      <description>Test of keyword arguments in fn:take-while</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:take-while(input := ?, predicate := ?) instance of function(item()*, fn(item(), xs:integer) as xs:boolean?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-lowest-1">
      <description>Test of keyword arguments in fn:lowest</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:lowest(input := ?, collation := ?, key := ?) instance of function(item()*, xs:string?, (fn(item()) as xs:anyAtomicType*)?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-some-1">
      <description>Test of keyword arguments in fn:some</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:some(input := ?, predicate := ?) instance of function(item()*, (fn(item(), xs:integer) as xs:boolean?)?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-all-equal-1">
      <description>Test of keyword arguments in fn:all-equal</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:all-equal(values := ?, collation := ?) instance of function(xs:anyAtomicType*, xs:string?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-all-different-1">
      <description>Test of keyword arguments in fn:all-different</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:all-different(values := ?, collation := ?) instance of function(xs:anyAtomicType*, xs:string?) as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-uri-1">
      <description>Test of keyword arguments in fn:parse-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:parse-uri(value := ?, options := ?) instance of function(xs:string?, map(*)?) as fn:uri-structure-record?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-build-uri-1">
      <description>Test of keyword arguments in fn:build-uri</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:build-uri(parts := ?, options := ?) instance of function(fn:uri-structure-record, map(*)?) as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-partition-1">
      <description>Test of keyword arguments in fn:partition</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:partition(input := ?, split-when := ?) instance of function(item()*, fn(item()*, item(), xs:integer) as xs:boolean?) as array(item()*)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-scan-left-1">
      <description>Test of keyword arguments in fn:scan-left</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:scan-left(input := ?, init := ?, action := ?) instance of function(item()*, item()*, fn(item()*, item()) as item()*) as array(*)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-scan-right-1">
      <description>Test of keyword arguments in fn:scan-right</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:scan-right(input := ?, init := ?, action := ?) instance of function(item()*, item()*, fn(item(), item()*) as item()*) as array(*)*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-invisible-xml-1">
      <description>Test of keyword arguments in fn:invisible-xml</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:invisible-xml(grammar := ?, options := ?) instance of function((xs:string | element(ixml))?, map(*)?) as fn(xs:string) as item()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-jtree-1">
      <description>Test of keyword arguments in fn:jtree</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:jtree(input := ?) instance of function((map(*)|array(*))) as jnode((map(*)|array(*)))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-jnode-selector-1">
      <description>Test of keyword arguments in fn:jnode-selector</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:jnode-selector(input := ?) instance of function(jnode()?) as xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-jnode-position-1">
      <description>Test of keyword arguments in fn:jnode-position</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:jnode-position(input := ?) instance of function(jnode()?) as xs:anyAtomicType?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-jnode-content-1">
      <description>Test of keyword arguments in fn:jnode-content</description>
      <created by="generate-keyword-test-set.xsl" on="2025-10-29"/>
      <environment ref="ka"/>
      <test>fn:jnode-content(input := ?) instance of function(jnode()?) as item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
</test-set>

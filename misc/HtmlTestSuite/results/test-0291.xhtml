<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><link href="https://drafts.csswg.org/css-color-5/#color-mix" rel="help"/>
<link href="https://bugzilla.mozilla.org/show_bug.cgi?id=1695376" rel="help"/>
<link href="mailto:emilio@crisal.io" rel="author" title="Emilio Cobos Álvarez"/>
<link href="https://mozilla.org" rel="author" title="Mozilla"/>
<link href="color-mix-basic-001-ref.html" rel="match"/>
<style>
div { color: black; }
.test { background-color: red; width: 14em; height: 1em; margin-top: 0; margin-bottom: 0; }
</style>
</head><body>
<script>
const TEST_CASES = [
  ["blue", "red"],
  ["blue", "green"],
  ["rgb(255, 0, 0, .2)", "red"],
  ["blue", "red", 0.9],
  ["blue", "red", 0],
  ["currentColor", "white"],
  ["currentColor", "rgba(0, 0, 0, .5)"],
];

for (let [from, to, animationProgress] of TEST_CASES) {
  const animationProgressExplicit = animationProgress !== undefined;
  animationProgress = animationProgressExplicit ? animationProgress : 0.5;

  let progress = ` ${animationProgress * 100}%`;
  let oneMinusProgress = ` ${(1 - animationProgress) * 100}%`;
  let values = [
    `color-mix(in srgb, ${from}, ${to} ${progress})`,
    `color-mix(in srgb, ${from} ${oneMinusProgress}, ${to})`,
    `color-mix(in srgb, ${from} ${oneMinusProgress}, ${to} ${progress})`,
  ];

  if (animationProgress == 0.5) {
    values.push(`color-mix(in srgb, ${from}, ${to})`);
  }

  for (let value of values) {
    const element = document.createElement("div")
    element.classList.add('test')
    element.style.backgroundColor = value;
    document.body.appendChild(element)
  }
}
</script>
</body>
</html>
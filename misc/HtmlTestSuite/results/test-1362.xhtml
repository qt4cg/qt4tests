<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/>
<title>Declarative Shadow DOM</title>
<link href="mailto:masonf@chromium.org" rel="author"/>
<link href="https://github.com/whatwg/dom/issues/831" rel="help"/>
<script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
<script src="../../html/resources/common.js"/>

</head><body>
<style>
  * { white-space: pre; }
  iframe { display:none; }
</style>
<div id="log"/>

<div id="mainpage" style="display:none">
  <div class="wrapper">
    <div class="host">
      <template shadowrootmode="open">
        <span class="content">Content</span>
      </template>
    </div>
  </div>
</div>

<script>
const content = `
  &lt;html&gt;&lt;body&gt;
  &lt;div class=wrapper&gt;
    &lt;div class=host&gt;
      &lt;template shadowrootmode=open&gt;
        &lt;span class=content&gt;Content&lt;/span&gt;
      &lt;/template&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;/body&gt;&lt;/html&gt;
`;

function assert_dsd(el,shouldHaveShadow) {
  const wrapper = el.querySelector('.wrapper');
  assert_true(!!wrapper,'Unable to find wrapper element');
  const host = wrapper.querySelector('.host');
  assert_true(!!host,'Unable to find host element');
  if (shouldHaveShadow) {
    assert_true(!!host.shadowRoot, 'Shadow root NOT FOUND.');
    assert_true(!!host.shadowRoot.querySelector('.content'),'Unable to locate content');
  } else {
    assert_true(!host.shadowRoot, 'Shadow root FOUND - none should be present.');
    const tmpl = host.querySelector('template');
    assert_true(!!tmpl, 'The template should be left as a &lt;template&gt; element');
    assert_equals(tmpl.getAttribute('shadowrootmode'),'open','The shadowrootmode attribute should still be present');
    assert_true(!!tmpl.content.querySelector('.content'),'Unable to locate content');
  }
}

test(() =&gt; {
  const div = document.getElementById('mainpage');
  assert_dsd(div,true);
}, 'Non-fragment parsing needs no opt-in');

const noChildElements = ['iframe','noscript','script','select','style','template','textarea','title','colgroup'];
const elements = HTML5_ELEMENTS.filter(el =&gt; !noChildElements.includes(el));
for (let elementName of elements) {
  var t = test(function() {
    const el1 = document.createElement(elementName);
    el1.innerHTML = content;
    assert_dsd(el1,false);

    const templateContent = `&lt;template id=tmpl&gt;${content}&lt;/template&gt;`;
    const el2 = document.createElement('div');
    el2.innerHTML = templateContent;
    assert_dsd(el2.querySelector('#tmpl').content,false);
  }, `innerHTML on a &lt;${elementName}&gt;`);
}

test(() =&gt; {
  const temp = document.createElement('template');
  temp.innerHTML = content;
  assert_dsd(temp.content,false, 'innerHTML should not allow declarative shadow content');
}, 'innerHTML on template');

test(() =&gt; {
  const templateContent = `&lt;template id=tmpl&gt;${content}&lt;/template&gt;`;
  const temp = document.createElement('template');
  temp.innerHTML = templateContent;
  assert_dsd(temp.content.querySelector('#tmpl').content,false);
}, 'innerHTML on template, with nested template content');

test(() =&gt; {
  const div = document.createElement('div');
  const shadow = div.attachShadow({mode: 'open'});
  shadow.innerHTML = content;
  assert_dsd(shadow,false);
}, 'innerHTML on shadowRoot');

test(() =&gt; {
  const parser = new DOMParser();
  let fragment = parser.parseFromString(content, 'text/html');
  assert_dsd(fragment.body,false);
  fragment = parser.parseFromString(content, 'text/html', {includeShadowRoots: false});
  assert_dsd(fragment.body,false);
  fragment = parser.parseFromString(content, 'text/html', {includeShadowRoots: true});
  assert_dsd(fragment.body,true);
}, 'DOMParser');

test(() =&gt; {
  const doc = document.implementation.createHTMLDocument('');
  doc.body.innerHTML = content;
  assert_dsd(doc.body,false);
}, 'createHTMLDocument with innerHTML - not supported');

test(() =&gt; {
  const doc = document.implementation.createHTMLDocument('');
  let range = doc.createRange();
  range.selectNode(doc.body);
  let documentFragment = range.createContextualFragment(content);
  assert_dsd(documentFragment,false);
}, 'createContextualFragment - not supported');

async_test((t) =&gt; {
  let client = new XMLHttpRequest();
  client.addEventListener('load', t.step_func_done(() =&gt; {
    assert_true(client.status == 200 &amp;&amp; client.responseXML != null);
    assert_dsd(client.responseXML.body,false);
    t.done();
  }));
  client.open("GET", `data:text/html,${content}`);
  client.responseType = 'document';
  client.send();
}, 'XMLHttpRequest - not supported');

test(() =&gt; {
  const div = document.createElement('div');
  div.insertAdjacentHTML('afterbegin',content);
  assert_dsd(div,false);
}, 'insertAdjacentHTML on element - not supported');

test(() =&gt; {
  const id = 'doc-write-1';
  document.write(`&lt;div id=${id} style="display:none"&gt;${content}&lt;/div&gt;`);
  assert_dsd(document.getElementById(id),true);
}, 'document.write allowed from synchronous script loaded from main document');

test(() =&gt; {
  const id = 'doc-write-2';
  const doc = document.implementation.createHTMLDocument('');
  doc.write(`&lt;div id=${id}&gt;${content}&lt;/div&gt;`);
  assert_dsd(doc.getElementById(id),false);
}, 'document.write disallowed on fresh document');


async_test((t) =&gt; {
  const iframe = document.createElement('iframe');
  iframe.style.display = "none";
  iframe.sandbox = "allow-same-origin";
  document.body.appendChild(iframe);
  iframe.addEventListener('load', t.step_func_done(() =&gt; {
    assert_dsd(iframe.contentDocument.body,true);
    t.done();
  }));
  iframe.srcdoc = content;
}, 'iframe');

async_test((t) =&gt; {
  const iframe = document.createElement('iframe');
  iframe.style.display = "none";
  document.body.appendChild(iframe);
  iframe.addEventListener('load', t.step_func_done(() =&gt; {
    assert_dsd(iframe.contentDocument.body,true);
    t.done();
  }));
  iframe.srcdoc = content;
}, 'iframe, no sandbox');

function getHandler(t, name, shouldHaveShadow) {
  return (e) =&gt; {
    t.step(() =&gt; {
      if (e.data.name == name) {
        assert_false(e.data.error,e.data.msg);
        assert_true(e.data.hasShadow == shouldHaveShadow);
        t.done();
      }
    });
  };
}
async_test((t) =&gt; {
  window.addEventListener('message', getHandler(t, 'iframe-sandbox', true));
}, 'sandboxed iframe allows declarative Shadow DOM');

async_test((t) =&gt; {
  window.addEventListener('message', getHandler(t,'iframe-no-sandbox', true));
}, 'iframe with no sandbox allows declarative Shadow DOM');

</script>

<iframe name="iframe-sandbox" sandbox="allow-scripts" src="support/declarative-child-frame.html"/>
<iframe name="iframe-no-sandbox" src="support/declarative-child-frame.html"/>
</body></html>
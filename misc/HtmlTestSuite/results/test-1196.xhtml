<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head>
<link href="mailto:vogelheim@chromium.org" rel="author" title="Daniel Vogelheim"/>
<link href="https://w3c.github.io/webappsec-trusted-types/dist/spec/" rel="help"/>
<script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
<meta content="require-trusted-types-for 'script'" http-equiv="Content-Security-Policy"/>
</head>
<body>
<script>
[ TrustedHTML, TrustedScript, TrustedScriptURL ].forEach(type =&gt; {

  test(t =&gt; {
    assert_true("fromLiteral" in type);
  }, `${type.name}.fromLiteral is supported`);

  test(t =&gt; {
    const c = type.fromLiteral`abc`;
    assert_true(c instanceof type);
    assert_equals(c.toString(), "abc");
  }, `${type.name}.fromLiteral: Basic string literal works.`);

  test(t =&gt; {
    const c = type.fromLiteral``;
    assert_true(c instanceof type);
    assert_equals(c.toString(), "");
  }, `${type.name}.fromLiteral: Empty string literal works.`);

  test(t =&gt; {
    const c = type.fromLiteral`\u{1f4a9}`;
    assert_true(c instanceof type);
    assert_equals(c.toString(), "\u{1f4a9}");
  }, `${type.name}.fromLiteral: A very important emoji works.`);

  test(t =&gt; {
    const c = type.fromLiteral`A Multiline
  string
     works.`;
    assert_true(c instanceof type);
    assert_true(c.toString().includes("\n"));
  }, `${type.name}.fromLiteral: Multi-line string literal works.`);

  test(t =&gt; {
    const tag = type.fromLiteral.bind(type);
    const c = tag`abc`;
    assert_true(c instanceof type);
    assert_equals(c.toString(), "abc");
  }, `${type.name}.fromLiteral: Bound method works.`);

  test(t =&gt; {
    assert_throws_js(TypeError, _ =&gt; {
      type.fromLiteral("abc");
    });
  }, `${type.name}.fromLiteral: String throws.`);

  test(t =&gt; {
    assert_throws_js(TypeError, _ =&gt; {
      type.fromLiteral(null);
    });
  }, `${type.name}.fromLiteral: null throws.`);

  test(t =&gt; {
    assert_throws_js(TypeError, _ =&gt; {
      type.fromLiteral(undefined);
    });
  }, `${type.name}.fromLiteral: undefined throws.`);

  test(t =&gt; {
    assert_throws_js(TypeError, _ =&gt; {
      type.fromLiteral({});
    });
  }, `${type.name}.fromLiteral: Object throws.`);

  test(t =&gt; {
    assert_throws_js(TypeError, _ =&gt; {
      type.fromLiteral`Hello ${2+3} world`
    });
  }, `${type.name}.fromLiteral: template literal with expression throws.`);

  test(t =&gt; {
    assert_throws_js(TypeError, _ =&gt; {
      type.fromLiteral(["abc"]);
    });
  }, `${type.name}.fromLiteral: non-literal throws.`);

  test(t =&gt; {
    assert_throws_js(TypeError, _ =&gt; {
      type.fromLiteral(Object.freeze(["abc"]));
    });
  }, `${type.name}.fromLiteral: frozen non-literal throws.`);

  test(t =&gt; {
    assert_throws_js(TypeError, _ =&gt; {
      type.fromLiteral(["abc", "def"], "xxx");
    });
  }, `${type.name}.fromLiteral: non-literal with param throws.`);

});

// TrustedHTML requires normalization of the value. Let's test that TrustedHTML
// (and only TrustedHTML) does this.
test(t =&gt; {
  const tag = TrustedHTML.fromLiteral.bind(TrustedHTML);
  assert_equals(tag`&lt;b&gt;`.toString(), "&lt;b&gt;&lt;/b&gt;");
}, "TrustedHTML.fromLiteral: Normalization of value works.");

test(t =&gt; {
  const tag = TrustedScript.fromLiteral.bind(TrustedScript);
  assert_equals(tag`&lt;b&gt;`.toString(), "&lt;b&gt;");
}, "TrustedScript.fromLiteral: No normalization of value occurs.");

test(t =&gt; {
  const tag = TrustedScriptURL.fromLiteral.bind(TrustedScriptURL);
  assert_equals(tag`&lt;b&gt;`.toString(), "&lt;b&gt;");
}, "TrustedScriptURL.fromLiteral: No normalization of value occurs.");

</script>
</body>
</html>
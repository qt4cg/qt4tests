<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><link href="https://drafts.css-houdini.org/css-properties-values-api-1/#css-style-value-reification" rel="help"/>
<meta content="Verifies that registered custom properties interact correctly with CSS Typed OM" name="assert"/>
<script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
<script src="./resources/utils.js"/>
<style id="style">
    div {}
</style>
</head><body><div id="target"/>

<script>

// Cleans style rules used for testing between every test.
add_result_callback(function(){
    target.attributeStyleMap.clear();
    // Clears 'div' rule in #style:
    style.sheet.rules[0].styleMap.clear();
});

// In the following utility functions, the 'map' parameter (if present)
// can be any StylePropertyMap. (Not StylePropertyMapReadOnly).

// Verifies that get()/getAll() reifies the specified property to a
// CSSUnparsedValue, with a string serialization equal to 'value'.
function verify_map_get_unparsed(map, name, value) {
    map.set(name, value);

    let specifiedValue = map.get(name);
    assert_true(specifiedValue instanceof CSSUnparsedValue);
    assert_equals(specifiedValue.toString(), value);

    let allSpecifiedValues = map.getAll(name);
    assert_equals(allSpecifiedValues.length, 1);
    assert_true(allSpecifiedValues[0] instanceof CSSUnparsedValue);
    assert_equals(allSpecifiedValues[0].toString(), value);
}

// Verifies that the specified value is accepted by set().
function verify_map_set(map, name, value) {
    map.set(name, value);
    assert_equals(map.get(name).toString(), value.toString());
}

// Verifies that the specified value is NOT accepted by set().
function verify_map_not_set(map, name, value) {
    assert_throws_js(TypeError, () =&gt; {
        map.set(name, value);
    });
}

// Verifies that the specified value is NOT accepted by append().
function verify_map_no_append(map, name, value) {
    assert_throws_js(TypeError, () =&gt; {
        map.append(name, value);
    });
}

// Verifies that the property 'name' shows up on iteration, that it's reified
// as a CSSUnparsedValue, and that the string representation is equal to
// 'value'.
function verify_map_iteration_unparsed(map, name, value) {
    map.set(name, value);
    let result = Array.from(map).filter(e =&gt; e[0] == name)[0];
    assert_equals(result.length, 2);
    let iter_value = result[1];
    assert_equals(iter_value.length, 1);
    assert_true(iter_value[0] instanceof CSSUnparsedValue);
    assert_equals(iter_value[0].toString(), value);
}

// Verifies that CSSStyleValue.parse/parseAll results in a CSSStyleValue with
// the 'expected' type.
function verify_parsed_type(prop, value, expected) {
    let parse_value = CSSStyleValue.parse(prop, value);
    let parse_all_value = CSSStyleValue.parseAll(prop, value);

    assert_true(parse_value instanceof expected);
    assert_true(parse_all_value.every(x =&gt; x instanceof expected))
}

// On the target element, verify that computed value of 'name' is an instance
// of 'expected' and not an instance of CSSUnparsedValue.
//
// If 'value' is non-null, that value is first set using the style attribute
// of the target element.
function verify_computed_type(name, value, expected) {
    if (expected == CSSUnparsedValue) {
        throw 'CSSUnparsedValue may not be used as expected type';
    }

    try {
        if (value != null) {
            target.style = `${name}: ${value}`;
        }

        let computedValue = target.computedStyleMap().get(name);

        assert_false(computedValue instanceof CSSUnparsedValue);
        assert_true(computedValue instanceof expected);
    } finally {
        if (value != null) {
            target.style = '';
        }
    }
}

// Verifies that the property 'name' shows up on iteration, that it's reified
// to the specified type, and that the string representation is equal to 'value'.
function verify_computed_iteration_type(name, value, type) {
    target.attributeStyleMap.set(name, value);
    let result = Array.from(target.computedStyleMap()).filter(e =&gt; e[0] == name)[0];
    assert_equals(result.length, 2);
    let iter_value = result[1];
    assert_equals(iter_value.length, 1);
    assert_true(iter_value[0] instanceof type);
    assert_equals(iter_value[0].toString(), value);
}

// Run the same test twice: once for each StylePropertyMap.
//
// https://drafts.css-houdini.org/css-typed-om-1/#stylepropertymap
function test_specified_maps(func, description) {
    test(function(){
        func(target.attributeStyleMap)
    }, description + ' [attributeStyleMap]');

    test(function(){
        let rule = style.sheet.rules[0];
        func(rule.styleMap)
    }, description + ' [styleMap]');
}

// StylePropertyMapReadOnly.get

test(function(){
    let name = generate_property('*', 'if(){}');
    assert_true(target.computedStyleMap().get(name) instanceof CSSUnparsedValue);

    target.attributeStyleMap.set(name, 'as{}df');
    assert_true(target.computedStyleMap().get(name) instanceof CSSUnparsedValue);
    target.attributeStyleMap.delete(name);
}, 'Computed * is reified as CSSUnparsedValue');

test(function(){
    verify_computed_type(generate_property('&lt;angle&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;angle&gt; '), '42deg', CSSUnitValue);
}, 'Computed &lt;angle&gt; is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property('&lt;color&gt;'), null, CSSStyleValue);
    verify_computed_type(generate_property('fail | &lt;color&gt; '), null, CSSStyleValue);
}, 'Computed &lt;color&gt; is reified as CSSStyleValue');

test(function(){
    verify_computed_type(generate_property('&lt;custom-ident&gt;'), null, CSSKeywordValue);
    verify_computed_type(generate_property('&lt;custom-ident&gt; | &lt;length&gt;'), 'none', CSSKeywordValue);
}, 'Computed &lt;custom-ident&gt; is reified as CSSKeywordValue');

test(function(){
    verify_computed_type(generate_property('&lt;image&gt;'), null, CSSImageValue);
    verify_computed_type(generate_property('fail | &lt;image&gt; '), 'url(thing.png)', CSSImageValue);
}, 'Computed &lt;image&gt; [url] is reified as CSSImageValue');

test(function(){
    verify_computed_type(generate_property('&lt;integer&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;integer&gt; '), '100', CSSUnitValue);
}, 'Computed &lt;integer&gt; is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property('&lt;length-percentage&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;length-percentage&gt; '), '10%', CSSUnitValue);
}, 'Computed &lt;length-percentage&gt; [%] is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property('&lt;length-percentage&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;length-percentage&gt; '), '10px', CSSUnitValue);
}, 'Computed &lt;length-percentage&gt; [px] is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property({syntax: '&lt;length-percentage&gt;', initialValue: 'calc(10% + 10px)'}), null, CSSMathSum);
    verify_computed_type(generate_property('fail | &lt;length-percentage&gt; '), 'calc(10px + 10%)', CSSMathSum);
}, 'Computed &lt;length-percentage&gt; [px + %] is reified as CSSMathSum');

test(function(){
    verify_computed_type(generate_property('&lt;length&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;length&gt; '), '10px', CSSUnitValue);
}, 'Computed &lt;length&gt; is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property('&lt;number&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;number&gt; '), '42', CSSUnitValue);
}, 'Computed &lt;number&gt; is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property('&lt;percentage&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;percentage&gt; '), '10%', CSSUnitValue);
}, 'Computed &lt;percentage&gt; is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property('&lt;resolution&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;resolution&gt; '), '300dpi', CSSUnitValue);
}, 'Computed &lt;resolution&gt; is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property('&lt;time&gt;'), null, CSSUnitValue);
    verify_computed_type(generate_property('fail | &lt;time&gt; '), '42s', CSSUnitValue);
}, 'Computed &lt;time&gt; is reified as CSSUnitValue');

test(function(){
    verify_computed_type(generate_property('&lt;url&gt;'), null, CSSStyleValue);
    verify_computed_type(generate_property('fail | &lt;url&gt; '), 'url(a)', CSSStyleValue);
}, 'Computed &lt;url&gt; is reified as CSSStyleValue');

test(function(){
    verify_computed_type(generate_property('thing1 | THING2'), null, CSSKeywordValue);
    verify_computed_type(generate_property('thing1 | THING2 | &lt;url&gt;'), 'THING2', CSSKeywordValue);
}, 'Computed ident is reified as CSSKeywordValue');

test(function(){
    verify_computed_type(generate_property('&lt;length&gt;+'), null, CSSUnitValue);
    verify_computed_type(generate_property('&lt;length&gt;+'), '10px 20px', CSSUnitValue);
}, 'First computed value correctly reified in space-separated list');

test(function(){
    verify_computed_type(generate_property('&lt;length&gt;#'), null, CSSUnitValue);
    verify_computed_type(generate_property('&lt;length&gt;#'), '10px, 20px', CSSUnitValue);
}, 'First computed value correctly reified in comma-separated list');

// StylePropertyMapReadOnly.getAll

test(function(){
    let name = generate_property({syntax: '&lt;length&gt;+', initialValue: '10px 20px'});
    assert_equals(target.computedStyleMap().getAll(name).length, 2);
    assert_true(target.computedStyleMap().getAll(name).every(x =&gt; x instanceof CSSUnitValue));

    target.style = `${name}: 10px 20px 30px`;
    assert_equals(target.computedStyleMap().getAll(name).length, 3);
    assert_true(target.computedStyleMap().getAll(name).every(x =&gt; x instanceof CSSUnitValue));
}, 'All computed values correctly reified in space-separated list');

test(function(){
    let name = generate_property({syntax: '&lt;length&gt;#', initialValue: '10px, 20px'});
    assert_equals(target.computedStyleMap().getAll(name).length, 2);
    assert_true(target.computedStyleMap().getAll(name).every(x =&gt; x instanceof CSSUnitValue));

    target.style = `${name}: 10px, 20px, 30px`;
    assert_equals(target.computedStyleMap().getAll(name).length, 3);
    assert_true(target.computedStyleMap().getAll(name).every(x =&gt; x instanceof CSSUnitValue));
}, 'All computed values correctly reified in comma-separated list');

// StylePropertyMap.get/All

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('*'), 'foo');
}, 'Specified * is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('foo'), 'foo');
}, 'Specified foo is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;angle&gt;'), '10deg');
}, 'Specified &lt;angle&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;color&gt;'), 'green');
}, 'Specified &lt;color&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;custom-ident&gt;'), 'foo');
}, 'Specified &lt;custom-ident&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;image&gt;'), 'url("a")');
}, 'Specified &lt;image&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;integer&gt;'), '1');
}, 'Specified &lt;integer&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;length-percentage&gt;'), 'calc(10% + 10px)');
}, 'Specified &lt;length-percentage&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;length&gt;'), '10px');
}, 'Specified &lt;length&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;number&gt;'), '1');
}, 'Specified &lt;number&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;percentage&gt;'), '10%');
}, 'Specified &lt;percentage&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;resolution&gt;'), '10dpi');
}, 'Specified &lt;resolution&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;time&gt;'), '1s');
}, 'Specified &lt;time&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;transform-function&gt;'), 'matrix(0, 0, 0, 0, 0, 0)');
}, 'Specified &lt;transform-function&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;transform-list&gt;'), 'matrix(0, 0, 0, 0, 0, 0)');
}, 'Specified &lt;transform-list&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;url&gt;'), 'url("a")');
}, 'Specified &lt;url&gt; is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;length&gt;+'), '10px 11px');
}, 'Specified &lt;length&gt;+ is reified as CSSUnparsedValue from get/getAll');

test_specified_maps(function(map){
    verify_map_get_unparsed(map, generate_property('&lt;length&gt;#'), '10px, 11px');
}, 'Specified &lt;length&gt;# is reified as CSSUnparsedValue from get/getAll');

// StylePropertyMap.set

// The following strings are valid for the specified syntax, and should be
// accepted by set().

test_specified_maps(function(map){
    verify_map_set(map, generate_property('*'), 'foo');
}, 'Specified string "foo" accepted by set() for syntax *');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('foo'), 'foo');
}, 'Specified string "foo" accepted by set() for syntax foo');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;angle&gt;'), '10deg');
}, 'Specified string "10deg" accepted by set() for syntax &lt;angle&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;color&gt;'), 'green');
}, 'Specified string "green" accepted by set() for syntax &lt;color&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;custom-ident&gt;'), 'foo');
}, 'Specified string "foo" accepted by set() for syntax &lt;custom-ident&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;image&gt;'), 'url("a")');
}, 'Specified string "url("a")" accepted by set() for syntax &lt;image&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;integer&gt;'), '1');
}, 'Specified string "1" accepted by set() for syntax &lt;integer&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length-percentage&gt;'), 'calc(10% + 10px)');
}, 'Specified string "calc(10% + 10px)" accepted by set() for syntax &lt;length-percentage&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;'), '10px');
}, 'Specified string "10px" accepted by set() for syntax &lt;length&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;number&gt;'), '1');
}, 'Specified string "1" accepted by set() for syntax &lt;number&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;percentage&gt;'), '10%');
}, 'Specified string "10%" accepted by set() for syntax &lt;percentage&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;resolution&gt;'), '10dpi');
}, 'Specified string "10dpi" accepted by set() for syntax &lt;resolution&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;time&gt;'), '1s');
}, 'Specified string "1s" accepted by set() for syntax &lt;time&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;transform-function&gt;'), 'matrix(0, 0, 0, 0, 0, 0)');
}, 'Specified string "matrix(0, 0, 0, 0, 0, 0)" accepted by set() for syntax &lt;transform-function&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;transform-list&gt;'), 'matrix(0, 0, 0, 0, 0, 0)');
}, 'Specified string "matrix(0, 0, 0, 0, 0, 0)" accepted by set() for syntax &lt;transform-list&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;url&gt;'), 'url("a")');
}, 'Specified string "url("a")" accepted by set() for syntax &lt;url&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;+'), '10px 11px');
}, 'Specified string "10px 11px" accepted by set() for syntax &lt;length&gt;+');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;#'), '10px, 11px');
}, 'Specified string "10px, 11px" accepted by set() for syntax &lt;length&gt;#');

// The following strings are invalid for the specified syntax, but should
// should be accepted by set().

test_specified_maps(function(map){
    verify_map_set(map, generate_property('foo'), 'bar');
}, 'Specified string "bar" accepted by set() for syntax foo');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;angle&gt;'), '10px');
}, 'Specified string "10px" accepted by set() for syntax &lt;angle&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;color&gt;'), '10px');
}, 'Specified string "10px" accepted by set() for syntax &lt;color&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;custom-ident&gt;'), '10px');
}, 'Specified string "10px" accepted by set() for syntax &lt;custom-ident&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;image&gt;'), 'a');
}, 'Specified string "a" accepted by set() for syntax &lt;image&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;integer&gt;'), 'float');
}, 'Specified string "float" accepted by set() for syntax &lt;integer&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length-percentage&gt;'), 'red');
}, 'Specified string "red" accepted by set() for syntax &lt;length-percentage&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;'), 'red');
}, 'Specified string "red" accepted by set() for syntax &lt;length&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;number&gt;'), 'red');
}, 'Specified string "red" accepted by set() for syntax &lt;number&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;percentage&gt;'), 'var(--x)');
}, 'Specified string "var(--x)" accepted by set() for syntax &lt;percentage&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;resolution&gt;'), 'blue');
}, 'Specified string "blue" accepted by set() for syntax &lt;resolution&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;time&gt;'), '1meter');
}, 'Specified string "1meter" accepted by set() for syntax &lt;time&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;transform-function&gt;'), 'foo(0)');
}, 'Specified string "foo(0)" accepted by set() for syntax &lt;transform-function&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;transform-list&gt;'), 'bar(1)');
}, 'Specified string "bar(1)" accepted by set() for syntax &lt;transform-list&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;url&gt;'), 'a');
}, 'Specified string "a" accepted by set() for syntax &lt;url&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;+'), 'a b');
}, 'Specified string "a b" accepted by set() for syntax &lt;length&gt;+');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;#'), 'a, b');
}, 'Specified string "a, b" accepted by set() for syntax &lt;length&gt;#');

// CSSUnparsedValue should always be accepted by any custom property,
// regardless of registation status.

const unparsed = CSSStyleValue.parse('--x', 'foo bar thing');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('*'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax *');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('foo'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax foo');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;angle&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;angle&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;color&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;color&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;custom-ident&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;custom-ident&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;image&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;image&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;integer&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;integer&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length-percentage&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;length-percentage&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;length&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;number&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;number&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;percentage&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;percentage&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;resolution&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;resolution&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;time&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;time&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;transform-function&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;transform-function&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;transform-list&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;transform-list&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;url&gt;'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;url&gt;');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;+'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;length&gt;+');

test_specified_maps(function(map){
    verify_map_set(map, generate_property('&lt;length&gt;#'), unparsed);
}, 'CSSUnparsedValue is accepted via set() for syntax &lt;length&gt;#');

// CSSStyleValues which aren't CSSUnparsedValues aren't accepted by set(),
// even if they're a value which is compatible with the syntax.
//
// https://drafts.css-houdini.org/css-properties-values-api-1/#cssom
const zero_matrix = CSSStyleValue.parse('transform', 'matrix(0, 0, 0, 0, 0, 0)');
const image_value = CSSStyleValue.parse('background-image', 'url(a)');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('*'), new CSSKeywordValue('foo'));
}, 'CSSKeywordValue rejected by set() for syntax *');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('foo'), new CSSKeywordValue('foo'));
}, 'CSSKeywordValue rejected by set() for syntax foo');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;angle&gt;'), CSS.deg(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;angle&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;custom-ident&gt;'), new CSSKeywordValue('foo'));
}, 'CSSKeywordValue rejected by set() for syntax &lt;custom-ident&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;image&gt;'), image_value);
}, 'CSSImageValue rejected by set() for syntax &lt;image&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;integer&gt;'), CSS.number(1));
}, 'CSSUnitValue rejected by set() for syntax &lt;integer&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;length-percentage&gt;'), CSS.px(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;length-percentage&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;length&gt;'), CSS.px(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;length&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;number&gt;'), CSS.number(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;number&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;percentage&gt;'), CSS.percent(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;percentage&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;resolution&gt;'), CSS.dpi(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;resolution&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;time&gt;'), CSS.s(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;time&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;transform-list&gt;'), zero_matrix);
}, 'CSSTransformValue rejected by set() for syntax &lt;transform-list&gt;');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;length&gt;+'), CSS.px(10), CSS.px(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;length&gt;+');

test_specified_maps(function(map){
    verify_map_not_set(map, generate_property('&lt;length&gt;#'), CSS.px(10), CSS.px(10));
}, 'CSSUnitValue rejected by set() for syntax &lt;length&gt;#');

// &lt;color&gt; has no CSSStyleValue subclass yet.
// &lt;url&gt; has no CSSStyleValue subclass yet.
// &lt;transform-function&gt; has no CSSStyleValue subclass yet.

// StylePropertyMap.append

// It is not allowed to append CSSStyleValues to custom properties, even
// when the string matches the syntax of the custom property.

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('*'), 'a');
}, 'Appending a string to * is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('foo+'), 'foo');
}, 'Appending a string to foo+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;angle&gt;+'), '10deg');
}, 'Appending a string to &lt;angle&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;color&gt;+'), 'red');
}, 'Appending a string to &lt;color&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;custom-ident&gt;+'), 'foo');
}, 'Appending a string to &lt;custom-ident&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;image&gt;+'), 'url(a)');
}, 'Appending a string to &lt;image&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;integer&gt;+'), 'a');
}, 'Appending a string to &lt;integer&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;length-percentage&gt;+'), 'calc(10*% + 10px)');
}, 'Appending a string to &lt;length-percentage&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;length&gt;+'), '10px');
}, 'Appending a string to &lt;length&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;number&gt;+'), '1.3');
}, 'Appending a string to &lt;number&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;percentage&gt;+'), '10%');
}, 'Appending a string to &lt;percentage&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;resolution&gt;+'), '10dpi');
}, 'Appending a string to &lt;resolution&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;time&gt;+'), '1s');
}, 'Appending a string to &lt;time&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;transform-function&gt;+'), 'matrix(0, 0, 0, 0, 0, 0)');
}, 'Appending a string to &lt;transform-function&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;transform-list&gt;'), 'matrix(0, 0, 0, 0, 0, 0)');
}, 'Appending a string to &lt;transform-list&gt; is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;url&gt;+'), 'url(a)');
}, 'Appending a string to &lt;url&gt;+ is not allowed');

test_specified_maps(function(map){
    verify_map_no_append(map, generate_property('&lt;length&gt;#'), '10px');
}, 'Appending a string to &lt;length&gt;# is not allowed');

// It is not allowed to append CSSStyleValues to custom properties, even
// when the CSSStyleValue matches the syntax of the custom property.

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('*'), new CSSKeywordValue('foo'));
}, 'Appending a CSSKeywordValue to * is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('foo+'), new CSSKeywordValue('foo'));
}, 'Appending a CSSKeywordValue to foo+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;angle&gt;+'), CSS.deg(10));
}, 'Appending a CSSUnitValue to &lt;angle&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;custom-ident&gt;+'), new CSSKeywordValue('foo'));
}, 'Appending a CSSKeywordValue to &lt;custom-ident&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;image&gt;+'), image_value);
}, 'Appending a CSSImageValue to &lt;image&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;integer&gt;+'), CSS.number(1));
}, 'Appending a CSSUnitValue to &lt;integer&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;length-percentage&gt;+'), CSS.px(10));
}, 'Appending a CSSUnitValue to &lt;length-percentage&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;length&gt;+'), CSS.px(10));
}, 'Appending a CSSUnitValue to &lt;length&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;number&gt;+'), CSS.number(10));
}, 'Appending a CSSUnitValue to &lt;number&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;percentage&gt;+'), CSS.percent(10));
}, 'Appending a CSSUnitValue to &lt;percentage&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;resolution&gt;+'), CSS.dpi(10));
}, 'Appending a CSSUnitValue to &lt;resolution&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;time&gt;+'), CSS.s(10));
}, 'Appending a CSSUnitValue to &lt;time&gt;+ is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;transform-list&gt;'), zero_matrix);
}, 'Appending a CSSKeywordValue to &lt;transform-list&gt; is not allowed');

test_specified_maps(function(map) {
    verify_map_no_append(map, generate_property('&lt;length&gt;#'), CSS.px(10));
}, 'Appending a CSSUnitValue to &lt;length&gt;# is not allowed');

// &lt;color&gt; has no CSSStyleValue subclass yet.
// &lt;url&gt; has no CSSStyleValue subclass yet.
// &lt;transform-function&gt; has no CSSStyleValue subclass yet.

// CSSStyleValue.parse/parseAll

test(function(){
    verify_parsed_type(generate_property('*'), 'while(){}', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax *', CSSUnparsedValue);

test(function(){
    verify_parsed_type(generate_property('&lt;angle&gt;'), '42deg', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;angle&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;color&gt;'), '#fefefe', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;color&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;custom-ident&gt; | &lt;length&gt;'), 'none', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;custom-ident&gt; | &lt;length&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;image&gt;'), 'url(thing.png)', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;image&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;integer&gt;'), '100', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;integer&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;length-percentage&gt;'), '10%', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;length-percentage&gt; (10%)');

test(function(){
    verify_parsed_type(generate_property('&lt;length-percentage&gt;'), '10px', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;length-percentage&gt; (10px)');

test(function(){
    verify_parsed_type(generate_property('&lt;length-percentage&gt;'), 'calc(10px + 10%)', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;length-percentage&gt; (calc(10px + 10%))');

test(function(){
    verify_parsed_type(generate_property('&lt;length&gt;'), '10px', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;length&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;number&gt;'), '42', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;number&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;percentage&gt;'), '10%', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;percentage&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;resolution&gt;'), '300dpi', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;resolution&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;time&gt;'), '42s', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;time&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;transform-function&gt;'), 'matrix(0, 0, 0, 0, 0, 0)', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;transform-function&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;transform-list&gt;'), 'matrix(0, 0, 0, 0, 0, 0)', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;transform-list&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;url&gt;'), 'url(a)', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;url&gt;');

test(function(){
    verify_parsed_type(generate_property('thing1 | THING2 | &lt;url&gt;'), 'THING2', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax thing1 | THING2 | &lt;url&gt;');

test(function(){
    verify_parsed_type(generate_property('&lt;length&gt;+'), '10px 20px', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;length&gt;+');

test(function(){
    verify_parsed_type(generate_property('&lt;length&gt;#'), '10px, 20px', CSSUnparsedValue);
}, 'CSSStyleValue.parse[All] returns CSSUnparsedValue for syntax &lt;length&gt;#');

// Direct CSSStyleValue objects:

test_specified_maps(function(map){
    for (let syntax of all_syntaxes()) {
        let name = generate_property(syntax);

        let initialValue = target.computedStyleMap().get(name);

        // We only care about direct CSSStyleValue instances in this test.
        // Ultimately, in some future version of CSS TypedOM, we may have no
        // direct CSSStyleValue instances at all, which is fine.
        if (initialValue.constructor !== CSSStyleValue) {
            continue;
        }

        // Verify that direct CSSStyleValues are rejected by set(). Two things
        // should prevent this: 1) direct CSSStyleValues are not
        // CSSUnparsedValues, and 2) direct CSSStyleValues are only valid for
        // the property they were reified from.
        verify_map_not_set(map, generate_property(syntax), initialValue);
    }
}, 'Direct CSSStyleValue may not be set');

// StylePropertyMap iteration

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('*'), 'foo');
}, 'Specified * is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('foo'), 'foo');
}, 'Specified foo is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;angle&gt;'), '10deg');
}, 'Specified &lt;angle&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;color&gt;'), 'green');
}, 'Specified &lt;color&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;custom-ident&gt;'), 'foo');
}, 'Specified &lt;custom-ident&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;image&gt;'), 'url("a")');
}, 'Specified &lt;image&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;integer&gt;'), '1');
}, 'Specified &lt;integer&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;length-percentage&gt;'), 'calc(10% + 10px)');
}, 'Specified &lt;length-percentage&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;length&gt;'), '10px');
}, 'Specified &lt;length&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;number&gt;'), '1');
}, 'Specified &lt;number&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;percentage&gt;'), '10%');
}, 'Specified &lt;percentage&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;resolution&gt;'), '10dpi');
}, 'Specified &lt;resolution&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;time&gt;'), '1s');
}, 'Specified &lt;time&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;transform-function&gt;'), 'matrix(0, 0, 0, 0, 0, 0)');
}, 'Specified &lt;transform-function&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;transform-list&gt;'), 'matrix(0, 0, 0, 0, 0, 0)');
}, 'Specified &lt;transform-list&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;url&gt;'), 'url("a")');
}, 'Specified &lt;url&gt; is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;length&gt;+'), '10px 11px');
}, 'Specified &lt;length&gt;+ is reified CSSUnparsedValue by iterator');

test_specified_maps(function(map){
    verify_map_iteration_unparsed(map, generate_property('&lt;length&gt;#'), '10px, 11px');
}, 'Specified &lt;length&gt;# is reified CSSUnparsedValue by iterator');

// StylePropertyMapReadOnly iteration

test(function(){
    let name = generate_property({syntax: '&lt;length&gt;', initialValue: '10px'});
    let result = Array.from(target.computedStyleMap()).filter(e =&gt; e[0] == name)[0];
    assert_true(typeof(result) !== 'undefined');
}, 'Registered property with initial value show up on iteration of computedStyleMap');

test(function(){
    verify_computed_iteration_type(generate_property('*'), 'thing', CSSUnparsedValue);
}, 'Computed * is reified as CSSUnparsedValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;angle&gt;'), '42deg', CSSUnitValue);
}, 'Computed &lt;angle&gt; is reified as CSSUnitValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;custom-ident&gt;'), 'thing', CSSKeywordValue);
}, 'Computed &lt;custom-ident&gt; is reified as CSSKeywordValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;image&gt;'), 'url(\"a\")', CSSImageValue);
}, 'Computed &lt;image&gt; is reified as CSSImageValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;integer&gt;'), '100', CSSUnitValue);
}, 'Computed &lt;integer&gt; is reified as CSSUnitValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;length&gt;'), '10px', CSSUnitValue);
}, 'Computed &lt;length&gt; is reified as CSSUnitValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;number&gt;'), '42', CSSUnitValue);
}, 'Computed &lt;number&gt; is reified as CSSUnitValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;percentage&gt;'), '10%', CSSUnitValue);
}, 'Computed &lt;percentage&gt; is reified as CSSUnitValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;resolution&gt;'), '300dppx', CSSUnitValue);
}, 'Computed &lt;resolution&gt; is reified as CSSUnitValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;time&gt;'), '10s', CSSUnitValue);
}, 'Computed &lt;time&gt; is reified as CSSUnitValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('none | thing | THING'), 'THING', CSSKeywordValue);
}, 'Computed none | thing | THING is reified as CSSKeywordValue by iterator');

test(function(){
    verify_computed_iteration_type(generate_property('&lt;angle&gt; | &lt;length&gt;'), '10px', CSSUnitValue);
}, 'Computed &lt;angle&gt; | &lt;length&gt; is reified as CSSUnitValue by iterator');

</script>
</body></html>
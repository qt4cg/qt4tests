<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><meta charset="utf-8"/>
<meta viewport="width=device-width, initial-scale=1"/>
<script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
<script src="/resources/testdriver.js"/>
<script src="/resources/testdriver-vendor.js"/>
</head><body>
<script type="module">
  import { attachIframe, getOppositeOrientation } from "./resources/orientation-utils.js";

  promise_test(async (t) =&gt; {
    const iframe = await attachIframe();
    const { orientation } = iframe.contentWindow.screen;

    const frameDOMException = iframe.contentWindow.DOMException;
    iframe.remove();

    await promise_rejects_dom(
      t,
      "InvalidStateError",
      frameDOMException,
      orientation.lock(getOppositeOrientation())
    );
  }, "Attempting to lock non-fully active documents results in a InvalidStateError");

  promise_test(async (t) =&gt; {
    const iframe = await attachIframe();
    const { orientation } = iframe.contentWindow.screen;

    const frameDOMException = iframe.contentWindow.DOMException;
    iframe.remove();

    assert_throws_dom("InvalidStateError", frameDOMException, () =&gt; { orientation.unlock() });
  }, "Attempting to unlock non-fully active documents results in a InvalidStateError");

  promise_test(async (t) =&gt; {
    const iframe = await attachIframe();
    const { orientation } = iframe.contentWindow.screen;

    await test_driver.bless("request full screen", null, iframe.contentWindow);
    await iframe.contentDocument.documentElement.requestFullscreen();

    const p = orientation.lock(getOppositeOrientation());

    const frameDOMException = iframe.contentWindow.DOMException;
    iframe.remove();

    await promise_rejects_dom(t, "AbortError", frameDOMException, p);
    assert_throws_dom("InvalidStateError", frameDOMException, () =&gt; { orientation.unlock() });
  }, "Making a document non-fully active while locking results in an AbortError");
</script>
</body>
</html>
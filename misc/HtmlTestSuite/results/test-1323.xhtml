<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
<meta content="" name="variant"/>
<meta content="?currententrychange" name="variant"/>

<script type="module">
import { Recorder, hasVariant } from "./resources/helpers.mjs";

promise_test(async t =&gt; {
  // Wait for after the load event so that the navigation doesn't get converted
  // into a replace navigation.
  await new Promise(resolve =&gt; window.onload = () =&gt; t.step_timeout(resolve, 0));

  const from = navigation.currentEntry;
  let firstNavigate = true;

  const recorder = new Recorder({
    skipCurrentChange: !hasVariant("currententrychange"),
    finalExpectedEvent: "transition.finished fulfilled"
  });

  recorder.setUpNavigationAPIListeners();

  navigation.addEventListener("navigate", e =&gt; {
    e.intercept({ handler() {
      recorder.record("handler run");
      return new Promise(r =&gt; t.step_timeout(r, 2));
    }});

    if (firstNavigate) {
      firstNavigate = false;

      const result2 = navigation.navigate("#2");
      recorder.setUpResultListeners(result2, " 2");
    }
  });

  const result1 = navigation.navigate("#1");
  recorder.setUpResultListeners(result1, " 1");

  Promise.resolve().then(() =&gt; recorder.record("promise microtask"));

  await recorder.readyToAssert;

  recorder.assert([
    /* event name, location.hash value, navigation.transition properties */
    ["navigate", "", null],
    ["AbortSignal abort", "", null],
    ["navigateerror", "", null],

    ["navigate", "", null],
    ["currententrychange", "#2", { from, navigationType: "push" }],
    ["handler run", "#2", { from, navigationType: "push" }],
    ["committed fulfilled 2", "#2", { from, navigationType: "push" }],
    ["committed rejected 1", "#2", { from, navigationType: "push" }],
    ["finished rejected 1", "#2", { from, navigationType: "push" }],
    ["promise microtask", "#2", { from, navigationType: "push" }],
    ["navigatesuccess", "#2", { from, navigationType: "push" }],
    ["finished fulfilled 2", "#2", null],
    ["transition.finished fulfilled", "#2", null]
  ]);

  recorder.assertErrorsAreAbortErrors();
}, "event and promise ordering for same-document navigation.navigate() inside the navigate handler");
</script>
</head><body/></html>
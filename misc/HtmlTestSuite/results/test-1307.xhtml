<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Custom Elements: Changes to the HTML parser</title>
<meta href="mailto:rniwa@webkit.org" name="author" title="Ryosuke Niwa"/>
<meta content="HTML parser must fallback to creating a HTMLUnknownElement when a custom element construction fails" name="assert"/>
<link href="https://html.spec.whatwg.org/#create-an-element-for-the-token" rel="help"/>
<link href="https://dom.spec.whatwg.org/#concept-create-element" rel="help"/>
<script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
</head>
<body>
<div id="log"/>
<script>

setup({allow_uncaught_exception:true});

class ReturnsTextNode extends HTMLElement {
    constructor() {
        super();
        return document.createTextNode('some text');
    }
};
customElements.define('returns-text', ReturnsTextNode);

class ReturnsNonElementObject extends HTMLElement {
    constructor() {
        super();
        return {};
    }
};
customElements.define('returns-non-element-object', ReturnsNonElementObject);

class LacksSuperCall extends HTMLElement {
    constructor() { }
};
customElements.define('lacks-super-call', LacksSuperCall);

class ThrowsException extends HTMLElement {
    constructor() {
        throw 'Bad';
    }
};
customElements.define('throws-exception', ThrowsException);

</script>
<returns-text/>
<returns-non-element-object/>
<lacks-super-call/>
<throws-exception/>
<script>

test(function () {
    var instance = document.querySelector('returns-text');

    assert_false(instance instanceof ReturnsTextNode, 'HTML parser must NOT instantiate a custom element when the constructor returns a Text node');
    assert_true(instance instanceof HTMLElement, 'The fallback element created by HTML parser must be an instance of HTMLElement');
    assert_true(instance instanceof HTMLUnknownElement, 'The fallback element created by HTML parser must be an instance of HTMLUnknownElement');

}, 'HTML parser must create a fallback HTMLUnknownElement when a custom element constructor returns a Text node');

test(function () {
    var instance = document.querySelector('returns-non-element-object');

    assert_false(instance instanceof ReturnsNonElementObject, 'HTML parser must NOT instantiate a custom element when the constructor returns a non-Element object');
    assert_true(instance instanceof HTMLElement, 'The fallback element created by HTML parser must be an instance of HTMLElement');
    assert_true(instance instanceof HTMLUnknownElement, 'The fallback element created by HTML parser must be an instance of HTMLUnknownElement');

}, 'HTML parser must create a fallback HTMLUnknownElement when a custom element constructor returns non-Element object');

test(function () {
    var instance = document.querySelector('lacks-super-call');

    assert_false(instance instanceof LacksSuperCall, 'HTML parser must NOT instantiate a custom element when the constructor does not call super()');
    assert_true(instance instanceof HTMLElement, 'The fallback element created by HTML parser must be an instance of HTMLElement');
    assert_true(instance instanceof HTMLUnknownElement, 'The fallback element created by HTML parser must be an instance of HTMLUnknownElement');

}, 'HTML parser must create a fallback HTMLUnknownElement when a custom element constructor does not call super()');

test(function () {
    var instance = document.querySelector('throws-exception');

    assert_false(instance instanceof ThrowsException, 'HTML parser must NOT instantiate a custom element when the constructor throws an exception');
    assert_true(instance instanceof HTMLElement, 'The fallback element created by HTML parser must be an instance of HTMLElement');
    assert_true(instance instanceof HTMLUnknownElement, 'The fallback element created by HTML parser must be an instance of HTMLUnknownElement');

}, 'HTML parser must create a fallback HTMLUnknownElement when a custom element constructor throws an exception');

</script>
</body>
</html>
<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta charset="utf-8"/>
<title>float property in math layout</title>
<link href="https://w3c.github.io/mathml-core/#user-agent-stylesheet" rel="help"/>
<meta content="Assert that float property is ignored for most math layout" name="assert"/>
<script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
<script src="/mathml/support/mathml-fragments.js"/>
<script src="/mathml/support/layout-comparison.js"/>
<style>
  /* .element class defined in mathml-fragments.js */
  .element &gt; * {
    padding: 10px;
    background: black;
  }
  /* override display: none on children of maction/semantics */
  maction &gt; *, semantics &gt; * {
    display: math;
  }
</style>
</head>
<body>
  <div id="log"/>
  <div id="container"/>

  <script>
    let container = document.getElementById("container");
    for (tag in MathMLFragments) {
        if (!FragmentHelper.isValidChildOfMrow(tag) ||
            FragmentHelper.isEmpty(tag))
            continue;

        // Skip mtable since it does not use display: math.
        if (tag == "mtable")
            continue;

        document.body.insertAdjacentHTML("beforeend", `&lt;div style="position: absolute;"&gt;\
&lt;div style="display: inline-block"&gt;&lt;math&gt;${MathMLFragments[tag]}&lt;/math&gt;&lt;/div&gt;\
&lt;div style="display: inline-block"&gt;&lt;math&gt;${MathMLFragments[tag]}&lt;/math&gt;&lt;/div&gt;\
&lt;/div&gt;`);
        let div = document.body.lastElementChild;
        let element =
            FragmentHelper.element(div.firstElementChild);
        let reference =
            FragmentHelper.element(div.lastElementChild);
        [element, reference].forEach(parent =&gt; {
            if (parent.classList.contains("mathml-container") ||
                parent.classList.contains("foreign-container")) {
                FragmentHelper.appendChild(parent);
                FragmentHelper.appendChild(parent);
                FragmentHelper.appendChild(parent);
            }
        });

        // Try to use float to invert the order in which children are normally
        // laid out.
        function layoutChildrenFromLeftToRight(tag) { tag != 'mroot'; }
        element.firstElementChild.style =
            `float: ${layoutChildrenFromLeftToRight(tag) ? 'right' : 'left'};`;
        element.lastElementChild.style =
            `float: ${layoutChildrenFromLeftToRight(tag) ? 'left' : 'right'};`;

        test(function () {
            let epsilon = 1;
            compareLayout(element, reference, epsilon);
        }, `float child ignored in ${tag}`);

        div.style = "display: none;"; // Hide the div after measurement.
    }
  </script>
</body>
</html>
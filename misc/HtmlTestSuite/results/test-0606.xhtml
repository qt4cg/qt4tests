<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><title>CSS Fonts Module Level 4: parsing @font-face src:local()</title>
<link href="https://drafts.csswg.org/css-fonts-4/#local-font-fallback" rel="help"/>
<script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
<style id="testStyle">
</style>
<script>
  const sheet = testStyle.sheet;
  tests = [
    // Unquoted collapsing space
    { src:'local(  A  )', valid:true },
    { src:'local(A B)', valid:true },
    { src:'local(A    B)', valid:true },
    { src:'local(   A  B   )', valid:true },
    // Unquoted local() with invalid CSS-wide keywords excluded from &lt;custom-ident&gt;
    { src:'local(default)', valid:false },
    { src:'local(inherit)', valid:false },
    { src:'local(revert)', valid:false },
    { src:'local(unset)', valid:false },
    // Unquoted local() with CSS-wide keywords as part of the name
    { src:'local(default A)', valid:true },
    { src:'local(inherit A)', valid:true },
    { src:'local(revert A)', valid:true },
    { src:'local(unset A)', valid:true },
    // Quoted local() with CSS-wide keywords
    { src:'local("default")', valid:true },
    { src:'local("inherit")', valid:true },
    { src:'local("revert")', valid:true },
    { src:'local("unset")', valid:true }
  ];

  for (let t of tests) {
    test(() =&gt; {
      assert_equals(sheet.cssRules.length, 0, "testSheet should initially be empty");
      sheet.insertRule("@font-face { src: " + t.src + "}");
      assert_equals(sheet.cssRules[0].style.getPropertyValue("src") != "", t.valid);
      sheet.deleteRule(0);
    }, "Check that src: " + t.src + " is " + (t.valid ? "valid" : "invalid"));
  }
</script>
</head><body/></html>
<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><script src="/resources/testharness.js"/>
<script src="/resources/testharnessreport.js"/>
<script src="/resources/testdriver.js"/>
<script src="/resources/testdriver-vendor.js"/>
<script src="/resources/testdriver-actions.js"/>
<script src="resources/shadow-dom.js"/>
<script src="resources/focus-utils.js"/>
</head><body><div id="log"/>
<p>
  document tree: [i0 -&gt; [x-foo]]<br/>
  x-foo's shadow tree: [j1 -&gt; j2 -&gt; [s1]]<br/>
  <b>slot #s1: [k1 -&gt; [x-bar] -&gt; k0 -&gt; [s2] -&gt; [s3]]</b><br/>
  x-bar's shadow tree: [m1 -&gt; m2]<br/>
  slot #s2: [i1 -&gt; i2]<br/>
  <b>slot #s3: [l1]<b><br/><br/>
  <b>v1 ideal nav forward:  [i0 -&gt; j1 -&gt; j2 -&gt; k1 -&gt; x-bar -&gt; m1 -&gt; m2 -&gt; k0 -&gt; i1 -&gt; i2 -&gt; l1]</b><br/>
</b></b></p><b><b>

<input id="i0" tabindex="0" value="i0"/>
<div id="x-foo">
  <input id="i2" slot="s2" tabindex="2" value="i2"/>
  <input id="i1" slot="s2" tabindex="1" value="i1"/>
  <template data-mode="open">
    <input id="j1" tabindex="1" value="j1"/>
    <slot id="s1" name="s1"> <!-- This slot does not have any assigned elements -->
      <input id="k0" tabindex="0" value="k0"/>
      <input id="k1" tabindex="1" value="k1"/>
      <slot id="s2" name="s2">
        <input id="should-be-ignored"/>
      </slot>
      <slot id="s3" name="s3"> <!-- This slot does not have any assigned elements -->
        <input id="l1" value="l1"/>
      </slot>
      <div id="x-bar" tabindex="2">
        <template data-mode="open">
          <input id="m2" tabindex="2" value="m2"/>
          <input id="m1" tabindex="1" value="m1"/>
        </template>
      </div>
    </slot>
    <input id="j2" tabindex="2" value="j2"/>
  </template>
</div>

<script>
'use strict';

promise_test(async () =&gt; {
  let xfoo = document.getElementById('x-foo');
  convertTemplatesToShadowRootsWithin(xfoo);

  let elements = [
      'i0',
      'x-foo/j1',
      'x-foo/j2',
      'x-foo/k1',
      'x-foo/x-bar',
      'x-foo/x-bar/m1',
      'x-foo/x-bar/m2',
      'x-foo/k0',
      'i1',
      'i2',
      'x-foo/l1'
    ];

    await assert_focus_navigation_forward(elements);
    elements.reverse();
    await assert_focus_navigation_backward(elements);
}, 'Focus should jump to fallback elements when a slot does not have any assigned nodes.');
</script>
</b></b></body></html>
<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-BracedActions">
   <description>Tests for the 4.0 conditional IfExpr production with braced actions (if (x) {t} } else { {f})</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-40/"
         idref="doc-xquery40-IfExpr"/>
   <link type="spec" document="XQuery" section-number="3.10" idref="id-conditionals"/>
   <dependency type="spec" value="XQ40+ XP40+"/>
   
   <environment name="fsx">
      <source role="." file="ForClause/fsx.xml">
         <description>Data about a filesystem represented in XML.</description>
         <created by="Michael Kay after Mike Rorke" on="2003-03-25"/>
      </source>    
   </environment>
   
   <environment name="nw_Customers">
      <source role="." file="AxisStep/nw_Customers.xml">
         <description>Customer name/address file with some non-ASCII characters..</description>
         <created by="Michael Kay after Kuen Siew" on="2003-03-25"/>
      </source>
   </environment>
   
   <environment name="acme_corp">
      <source role="." file="../op/union/acme_corp.xml">
         <description>Source document for Function Declaration tests</description>
         <created by="Michael Kay after Ravindranath Chennoju" on="2000-01-01"/>
      </source>
   </environment> 
   
   <environment name="xq311A">
      <source role="." file="IfExpr/xq311A.xml">
         <description>Data that fits first example in XQuery 3.11.</description>
         <created by="Michael Kay after David Marston" on="2003-03-25"/>
      </source>
   </environment> 
   

   <test-case name="CondExpr-Braced-002">
      <description> Simple if expression where boolean is a constant true </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (fn:true()) { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <assert-xml><![CDATA[<elem1/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-003">
      <description> Simple if expression where boolean is a constant false </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (fn:false()) { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <assert-xml><![CDATA[<elem2/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-004">
      <description> Node set from a path expression as test condition </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (//CompanyName) { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <assert-xml><![CDATA[<elem1/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-005">
      <description> Empty node set from a path expression as test condition </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (//NodeDoesNotExist) { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <assert-xml><![CDATA[<elem2/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-006">
      <description>FileName: CondExpr006  then-expression has another if expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<out>{ if (1 != 0) { if (4 != 5) { 1 } else { 2 } } else { 3 }}</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>1</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-007">
      <description> else-expr has another if expression </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (//MissingNode) { <elem3/> } else if (/Root/Customers[@CustomerID='ALFKI']//Country = "Germany") { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <assert-xml><![CDATA[<elem1/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-008">
      <description> and-expression in test expression </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <test>if ( /Root/Customers[1]/@CustomerID = 'ALFKI' and /Root/Customers[1]/FullAddress/City = 'Berlin') { "pass" } else { "fail" }</test>
      <result>
         <assert-string-value>pass</assert-string-value>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-009">
      <description> or-expression in test expression </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <test>if (/Root/Customers[1]/@CustomerID = 'ALFKI' or /Root/Customers[1]/FullAddress/City = 'Non-Existent') { "pass" } else { "fail" }</test>
      <result>
         <assert-string-value>pass</assert-string-value>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-010">
      <description>FileName: CondExpr010  a true expression in if expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <test> if (2 != 4) { 1 } else { 0 }</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-011">
      <description>FileName: CondExpr011  If expression as argument to a function </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <dependency type="spec" value="XQ40+"/>
      <test>fn:string-length(if (2 != 3) { 'foo' } else { 'expanded-foo' })</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-012">
      <description>FileName: CondExpr012  Adapted from example in spec; test expression is a relational expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <environment ref="xq311A"/>
      <dependency type="spec" value="XQ40+"/>
      <test>if (/doc/widget1/@unit-cost = /doc/widget2/@unit-cost) { /doc/widget1/@name } else { /doc/widget2/@name }</test>
      <result>
         <assert-string-value>axolotl</assert-string-value>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-013">
      <description>FileName: CondExpr013  test expression has another if expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <environment ref="xq311A"/>
      <dependency type="spec" value="XQ40+"/>
      <test> if (if (5 != 3) { fn:true() } else { fn:empty(/doc/widget1) }) { "search" } else { "assume" }</test>
      <result>
         <assert-string-value>search</assert-string-value>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-014">
      <description>FileName: CondExpr014  Two if expressions at same depth in larger expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <environment ref="xq311A"/>
      <test> ( if (3 != 2) { 16 } else { 0 } ) + ( if (8 = 7) { 4 } else { 1 }) </test>
      <result>
         <assert-eq>17</assert-eq>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-015">
      <description>FileName: CondExpr015  Two if expressions at same depth in larger expression, each parenthesized </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <test> (if (3 != 2) { 16 } else { 0 }) + (if (8 = 7) { 4 } else { 1 }) </test>
      <result>
         <assert-eq>17</assert-eq>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-016">
      <description>FileName: CondExpr016  if where branches return different valid types </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <modified by="Michael Kay" on="2020-01-14" change="Avoid implicit use of XML serialization for testing the result"/>
      <environment ref="fsx"/>
      <test>(//Folder)[1]/File[ if ( ./@name='File00000000000' ) { 2 } else { true() }]/FileName </test>
      <result>
         <all-of>
            <assert-count>30</assert-count>
            <assert>$result[1] eq "File00000000001"</assert>
            <assert>$result[2] eq "File00000000002"</assert>
            <assert>$result[3] eq "File00000000003"</assert>
            <assert>$result[4] eq "File00000000004"</assert>
            <assert>$result[5] eq "File00000000005"</assert>
            <assert>$result[6] eq "File00000000006"</assert>           
         </all-of>
         <!--<assert-xml><![CDATA[<FileName>File00000000001</FileName><FileName>File00000000002</FileName>
            <FileName>File00000000003</FileName><FileName>File00000000004</FileName><FileName>File00000000005</FileName>
            <FileName>File00000000006</FileName><FileName>File00000000007</FileName><FileName>File00000000008</FileName>
            <FileName>File00000000009</FileName><FileName>File00000000010</FileName><FileName>File00000000011</FileName>
            <FileName>File00000000012</FileName><FileName>File00000000013</FileName><FileName>File00000000014</FileName>
            <FileName>File00000000015</FileName><FileName>File00000000016</FileName><FileName>File00000000017</FileName>
            <FileName>File00000000018</FileName><FileName>File00000000019</FileName><FileName>File00000000020</FileName>
            <FileName>File00000000021</FileName><FileName>File00000000022</FileName><FileName>File00000000023</FileName>
            <FileName>File00000000024</FileName><FileName>File00000000025</FileName><FileName>File00000000026</FileName>
            <FileName>File00000000027</FileName><FileName>File00000000028</FileName><FileName>File00000000029</FileName>
            <FileName>File00000000030</FileName>]]></assert-xml>-->
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-017">
      <description>FileName: CondExpr017  if where branches return different valid types </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <modified by="Michael Kay" on="2017-03-17" change="Avoid implicit use of XML serialization for testing the result"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return if( $file/FileName='File00000000000' ) { $file/FileName } else { data( $file/FileName ) }</test>
      <result>
         <all-of>
            <assert-count>31</assert-count>
            <assert>$result[1][. instance of element(FileName)][. = 'File00000000000']</assert>
            <assert>every $r in subsequence($result,2) satisfies $r instance of xs:untypedAtomic</assert>
            <assert>string-join(subsequence($result,2), ' ') eq "File00000000001 File00000000002 File00000000003 File00000000004 File00000000005 File00000000006 File00000000007 File00000000008 File00000000009 File00000000010 File00000000011 File00000000012 File00000000013 File00000000014 File00000000015 File00000000016 File00000000017 File00000000018 File00000000019 File00000000020 File00000000021 File00000000022 File00000000023 File00000000024 File00000000025 File00000000026 File00000000027 File00000000028 File00000000029 File00000000030"</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-018">
      <description>FileName: CondExpr018  if where branches return different valid types </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return if( $file/FileName='File00000000004' ) { 1 } else { data( $file/FileName ) }</test>
      <result>
         <assert-string-value>File00000000000 File00000000001 File00000000002 File00000000003 1 File00000000005 File00000000006 File00000000007 File00000000008 File00000000009 File00000000010 File00000000011 File00000000012 File00000000013 File00000000014 File00000000015 File00000000016 File00000000017 File00000000018 File00000000019 File00000000020 File00000000021 File00000000022 File00000000023 File00000000024 File00000000025 File00000000026 File00000000027 File00000000028 File00000000029 File00000000030</assert-string-value>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-019">
      <description>FileName: CondExpr019  Test with test expression not contained in ( ... ) </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <environment ref="fsx"/>
      <test>if //File[1] { "true" } else { "false" }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-20">
      <description>FileName: CondExpr020  Test case where {-expression raises a dynamic error, but test-expression selects } else {-expression so no error is raised }</description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <environment ref="fsx"/>
      <test>if( false() ) { /Folder[1] cast as xs:double ? } else { 10 cast as xs:double ? }</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-21">
      <description>FileName: CondExpr021  Test case where } else {-expression raises a dynamic error, but test-expression selects {-expression so no error is raised </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <environment ref="fsx"/>
      <test>if( true() ) { 10 cast as xs:double ? } else { /Folder[1] cast as xs:double ?}</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-022">
      <description> Test case where {-expression raises a dynamic error, but test-expression selects } else {-expression so no error is raised </description>
      <created by="Michael Kay after Nicolae Brinza" on="2009-04-01"/>
      <test>if (doc-available('nodocument.xml')) { doc('nodocument.xml') } else { 10 cast as xs:double }</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-1">
      <description> A test whose essence is: `(if(2) { 1 } else { 0 }) eq 1`. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>(if(2) { 1 } else { 0 }) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-2">
      <description> A test whose essence is: `if(()) { false() } else { true() }`. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>if(()) { false() } else { true() }</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-3">
      <description> An expression involving the if expression that trigger certain optimization paths in some implementations. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>(if((1, current-time())[1] treat as xs:integer) { true() } else { false() }) eq true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-4">
      <description> An expression involving the if expression that trigger certain optimization paths in some implementations(#2). </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>(if(boolean((1, current-time())[1] treat as xs:integer)) { true() } else { false() }) eq true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-5">
      <description> An expression involving the if expression that trigger certain optimization paths in some implementations(#2). </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>if((1, 2, 3, hours-from-time(current-time()))[1]) { true() } else { false() }</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-6">
      <description> An expression involving the if expression that trigger certain optimization paths in some implementations(#3). </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>string(if(boolean((1, current-time())[1] treat as xs:integer)) { true() } else { false() }) eq "true"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-7">
      <description> An if-test which EBV cannot be extracted from. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>(if(current-time()) { 1 } else { 0 }) eq 1</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-8">
      <description> An if-test which EBV cannot be extracted from. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>1 eq (if(xs:anyURI("example.com/")) { 1 } else { 0 })</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-9">
      <description> An if-test which EBV cannot be extracted from. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>0 eq (if(xs:anyURI("")) { 1 } else { 0 })</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-10">
      <description> An if-test applied on fn:count(). </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>if(count((1, 2, 3, current-time(), 4))) { true() } else { 4 }</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-11">
      <description> An if-test applied on fn:count() combined with fn:not(). </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>if(not(count(remove((1, 2, 3, current-time()), 1)))) { 3 } else { true() }</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CondExpr-Braced-12">
      <description> if-{ clause combined with fn:boolean(). </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>if(boolean((1, 2, 3, current-time())[1] treat as xs:integer)) { true() } else { 4 }</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-CondExpr-Braced-1">
      <description> An expression that can be rewritten to the empty sequence, no matter the test branch. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[empty(if(<e>{current-time()}</e>) { () } )]]></test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-CondExpr-Braced-2">
      <description> An expression that can be simplified to any of the result branches, no matter the test branch. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[empty(if(<e>{current-time()}</e>) { 1 } else { 1 })]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-CondExpr-Braced-3">
      <description> It is ok to name a function 'unordered'. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test>declare default function namespace "http://www.example.com/"; declare function unordered() { 1 }; unordered()</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-CondExpr-Braced-4">
      <description> Extract the EBV from a node sequence. Sorting and deduplication isn't necessary in that case. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <environment ref="acme_corp"/>
      <test>if(//(employee[location = "Denver"]/ancestor::*)) { 1 } else { 3 }</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-CondExpr-Braced-5">
      <description> There is no exclamation mark operator in XQuery. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>if(!true()) { 2 } else { 3 }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-CondExpr-Braced-6">
      <description> An if expression cannot directly be an axis step. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<e/>/if(true()) { 1 } else { 3 }]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-CondExpr-Braced-7">
      <description> Use a set of expressions that trigger a bug in some parsers. </description>
      <created by="Michael Kay after Frans Englich" on="2008-05-08"/>
      <test>
         if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
         else if (1) { 1 } 
      </test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="cbcl-condexpr-braced-001">
      <description> Tests if(exists($x)) { f($x) }  optimization </description>
      <created by="Michael Kay after Nick Jones" on="2008-06-23"/>
      <test>
      	let $x := zero-or-one((1 to 10)[. div 2 = 2]) 
      	return if(exists($x)) { xs:string($x) } 
      </test>
      <result>
         <assert-string-value>4</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-condexpr-braced-002">
      <description> tests if(empty($x)) { () } else { f($x) } optimization </description>
      <created by="Michael Kay after Nick Jones" on="2008-06-23"/>
      <test>
      	let $x := zero-or-one((1 to 10)[. div 2 = 2]) 
      	return if(empty($x)) { () } else { xs:string($x) }
      </test>
      <result>
         <assert-string-value>4</assert-string-value>
      </result>
   </test-case>
   
 
</test-set>
<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-highest" covers-40="fn-highest">
   <description>Tests for the fn:highest function (4.0 proposal)</description>
   
   <dependency type="spec" value="XP40+ XQ40+"/>

   <test-case name="highest-001">
      <description>test highest() - Saxon 9.2 version using higher-order functions</description>
      <created by="Michael Kay" on="2014-04-13"/>
      <test>
         highest(doc('highest/highest-001.xml')/*/*, (), function($item as element()){xs:decimal($item)})
      </test>
      <result>
         <all-of>
            <assert>$result[1][@id="5"]='123.60'</assert>
            <assert>$result[2][@id="8"]='123.6'</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="highest-002">
      <description>test highest() on an empty sequence - Saxon 9.2 version using higher-order functions</description>
      <created by="Michael Kay" on="2014-04-13"/>
      <test>
         highest(doc('highest/highest-001.xml')/*/*[@non-existent], (), function($item as element()){xs:decimal($item)})
      </test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="highest-003">
      <description>test highest() using collations - Saxon 9.2 version using higher-order functions</description>
      <created by="Michael Kay" on="2014-04-13"/>
      <environment>
         <collation default="true" uri="http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"/>
      </environment>
      <test>
         highest(doc('highest/highest-003.xml')/*/*, (), function($item as element()){xs:string($item)})
      </test>
      <result>
         <all-of>
            <assert>$result[1][@id="5"]='katy'</assert>
            <assert>$result[2][@id="7"]='Katy'</assert>
            <assert>$result[3][@id="8"]='KATY'</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="highest-004">
      <description>test highest() with a default collation</description>
      <created by="Michael Kay" on="2014-04-13"/>
      <environment>
         <collation default="true" uri="http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"/>
      </environment>
      <test>
         highest(doc('highest/highest-003.xml')/*/*, (), string#1)        
      </test>
      <result>
         <all-of>
            <assert>$result[1][@id="5"]='katy'</assert>
            <assert>$result[2][@id="7"]='Katy'</assert>
            <assert>$result[3][@id="8"]='KATY'</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="highest-005">
      <description>test highest() : second argument is a system function</description>
      <created by="Michael Kay" on="2014-04-13"/>
      <test>
         highest(doc('highest/highest-005.xml')/*/*, (), round#1)   
      </test>
      <result>
         <all-of>
            <assert>$result[1][@id="1"]='123.5'</assert>
            <assert>$result[2][@id="5"]='123.60'</assert>
            <assert>$result[3][@id="7"]='123.5'</assert>
            <assert>$result[4][@id="8"]='123.6'</assert>
         </all-of>
      </result>
   </test-case> 

   <test-case name="highest-100">
      <description>Empty sequence</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(())]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   <test-case name="highest-101">
      <description>Filter yielding single string</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(('a', 'b', 'c', 'd', 'e', 'f')[. = 'f'])]]></test>
      <result>
         <assert-string-value>f</assert-string-value>
      </result>
   </test-case>
   <test-case name="highest-102">
      <description>Filter yielding empty sequence</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(('a', 'b', 'c', 'd', 'e', 'f')[. = 'g'])]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   <test-case name="highest-103">
      <description>Single string</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest('x')]]></test>
      <result>
         <assert-string-value>x</assert-string-value>
      </result>
   </test-case>
   <test-case name="highest-104">
      <description>Doubles</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest((1e0, 2e0))]]></test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>
   <test-case name="highest-105">
      <description>Integers</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest((8 to 11))]]></test>
      <result>
         <assert-eq>11</assert-eq>
      </result>
   </test-case>
   <test-case name="highest-106">
      <description>Reversed integers</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(reverse(8 to 11))]]></test>
      <result>
         <assert-eq>11</assert-eq>
      </result>
   </test-case>
   <test-case name="highest-107">
      <description>Integers compared as strings</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest((8 to 11), (), string#1)]]></test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>
   <test-case name="highest-108">
      <description>Reversed integers compared as strings</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(reverse(8 to 11), (), string#1)]]></test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>
   <test-case name="highest-109">
      <description>Integers ignored by the comparator</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest((3, 2, 1), (), function($k) { true() })]]></test>
      <result>
         <assert-deep-eq>3, 2, 1</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="highest-110">
      <description>Integers compared by their string length</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest((8 to 11), (), function($k) { string-length(string($k)) })]]></test>
      <result>
         <assert-deep-eq>10, 11</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="highest-111">
      <description>Reversed integers compared by their string length</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(reverse(8 to 11), (), function($k) { string-length(string($k)) })]]></test>
      <result>
         <assert-deep-eq>11, 10</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="highest-112">
      <description>Elements with numeric attribute comparison</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[fn:highest((<a _='1'/>, <b _='2'/>), (), function($k) { $k/@* }) ! name()]]></test>
      <result>
         <assert-string-value>b</assert-string-value>
      </result>
   </test-case>
   <test-case name="highest-113">
      <description>Element with numeric attribute comparison</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[fn:highest(<_ _='1'/>, (), function($a) { $a/@* })]]></test>
      <result>
         <assert-xml><![CDATA[<_ _="1"/>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="highest-114">
      <description>Elements with numeric attribute comparison</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[fn:highest((<_ _='9'/>, <_ _='10'/>), (), function($a) { $a/@* })]]></test>
      <result>
         <assert-xml><![CDATA[<_ _="10"/>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="highest-115">
      <description>Element with attribute string comparison</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[fn:highest((<_ _='9'/>, <_ _='10'/>), (), function($a) { string($a/@*) })]]></test>
      <result>
         <assert-xml><![CDATA[<_ _="9"/>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="highest-116">
      <description>Replicated argument</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(replicate('a', 2))]]></test>
      <result>
         <assert-deep-eq>'a', 'a'</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="highest-117">
      <description>Replicated argument</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(replicate(5, 2))]]></test>
      <result>
         <assert-deep-eq>5, 5</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="highest-118">
      <description>Reversed argument</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest(reverse( (1 to 6)[. > 3] ))]]></test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>
   <test-case name="highest-119">
      <description>Arguments of different types</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest((1, 'x'))]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   <test-case name="highest-120">
      <description>Arguments of the same type that cannot be compared</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <test><![CDATA[fn:highest((xs:gYear('9998'), xs:gYear('9999')))]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   <test-case name="highest-121">
      <description>Argument that cannot be compared</description>
      <created by="Christian Gruen" on="2022-08-09"/>
      <modified by="Michael Kay" on="2023-02-02" 
                change="with a singleton sequence, a processor could avoid evaluating the sort key"/>
      <test><![CDATA[fn:highest((true#0, false#0))]]></test>
      <result>
         <error code="FOTY0013"/>
      </result>
   </test-case>
   <test-case name="highest-122">
      <description>Untyped data that cannot be converted to xs:double</description>
      <created by="Christian Gruen" on="2022-11-24"/>
      <test><![CDATA[fn:highest((xs:untypedAtomic('1'), xs:untypedAtomic('')))]]></test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>
   <test-case name="highest-123">
      <description>Untyped data that cannot be converted to xs:double</description>
      <created by="Christian Gruen" on="2022-11-24"/>
      <test><![CDATA[fn:highest((xs:untypedAtomic(''), xs:untypedAtomic('1')))]]></test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>
   <test-case name="highest-124">
      <description>Untyped data that cannot be converted to xs:double</description>
      <created by="Christian Gruen" on="2022-11-24"/>
      <test><![CDATA[fn:highest(replicate(xs:untypedAtomic(''), 2))]]></test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>

   <test-case name="highest-901">
      <description>test highest() second argument is a call on a function with the wrong signature</description>
      <created by="Michael Kay" on="2014-04-13"/>
      <test>
         highest(doc('highest/highest-005.xml')/*/*, (), round#2)   
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="highest-902">
      <description>test highest() implicit string-to-double conversion fails</description>
      <created by="Michael Kay" on="2014-04-13"/>
      <environment>
         <collation default="true" uri="http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"/>
      </environment>
      <test>
         highest(doc('highest/highest-003.xml')/*/*)        
      </test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>
</test-set>

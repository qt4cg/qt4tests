<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-char">
   <description>Tests for the fn:char function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
      idref="func-char"/>
   
   <dependency type="spec" value="XP40+ XQ40+"/>
   
   <test-case name="fn-char-001">
      <description> backslash escapes </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("\n") => string-to-codepoints()</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-002">
      <description> backslash escapes </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("\t") => string-to-codepoints()</test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-003">
      <description> backslash escapes </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("\r") => string-to-codepoints()</test>
      <result>
         <assert-eq>13</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-004">
      <description> backslash escapes </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("\f") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-005">
      <description> backslash escapes </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("\x0A") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-006">
      <description> backslash escapes </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("\u00A0") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-101">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x0A") => string-to-codepoints()</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-102">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x9") => string-to-codepoints()</test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-103">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#xa0") => string-to-codepoints()</test>
      <result>
         <assert-eq>160</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-104">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#xa0") => string-to-codepoints()</test>
      <result>
         <assert-eq>160</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-105">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x39B") => string-to-codepoints()</test>
      <result>
         <assert-eq>923</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-106">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x39B") => string-to-codepoints()</test>
      <result>
         <assert-eq>923</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-107">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x1f600") => string-to-codepoints()</test>
      <result>
         <assert-eq>128512</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-108">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x000000000000000001f600") => string-to-codepoints()</test>
      <result>
         <assert-eq>128512</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-109">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#X1f600") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-110">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x 1f600") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-111">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x1f60g") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-112">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#x1f600;") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-113">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("&amp;amp;#x1f600") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-114">
      <description> hex literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#xDEAD") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>.
      </result>
   </test-case>
   
   <test-case name="fn-char-201">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#10") => string-to-codepoints()</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-202">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#9") => string-to-codepoints()</test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-203">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#160") => string-to-codepoints()</test>
      <result>
         <assert-eq>160</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-204">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#0160") => string-to-codepoints()</test>
      <result>
         <assert-eq>160</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-205">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#923") => string-to-codepoints()</test>
      <result>
         <assert-eq>923</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-206">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#00923") => string-to-codepoints()</test>
      <result>
         <assert-eq>923</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-207">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#128512") => string-to-codepoints()</test>
      <result>
         <assert-eq>128512</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-208">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#00000000000000000128512") => string-to-codepoints()</test>
      <result>
         <assert-eq>128512</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-209">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#1f600") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-210">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("# 128512") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-211">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#128,512") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-212">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("#128512;") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-213">
      <description> decimal literals </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("&amp;amp;#128512") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-300">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("dollar") => string-to-codepoints()</test>
      <result>
         <assert-eq>36</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-301">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("cent") => string-to-codepoints()</test>
      <result>
         <assert-eq>162</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-302">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("pound") => string-to-codepoints()</test>
      <result>
         <assert-eq>163</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-303">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("hamilt") => string-to-codepoints()</test>
      <result>
         <assert-eq>8459</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-304">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("Qopf") => string-to-codepoints()</test>
      <result>
         <assert-eq>8474</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-305">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("malt") => string-to-codepoints()</test>
      <result>
         <assert-eq>10016</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-306">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("ne") => string-to-codepoints()</test>
      <result>
         <assert-eq>8800</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-307">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("sup3") => string-to-codepoints()</test>
      <result>
         <assert-eq>179</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-308">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("lharul") => string-to-codepoints()</test>
      <result>
         <assert-eq>10602</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-309">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("acE") => string-to-codepoints()</test>
      <result>
         <assert-deep-eq>8766, 819</assert-deep-eq><!--U+0223E U+00333-->
      </result>
   </test-case>
   
   <test-case name="fn-char-310">
      <description> HTML5 entities </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("Yfr") => string-to-codepoints()</test>
      <result>
         <assert-eq>120092</assert-eq>
      </result>
   </test-case>
   
   <test-case name="fn-char-900">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char("") => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-901">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char(()) => string-to-codepoints()</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-902">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char(("x0A", "x0A")) => string-to-codepoints()</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-903">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char(("x0Ax0A")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-904">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char((" ")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-905">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char((" \t ")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-906">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char(("\t\t")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-907">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char(("&amp;amp;dollar")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-908">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char(("&amp;amp;dollar;")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-909">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char(("dollar;")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-910">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char((" dollar ")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
   <test-case name="fn-char-911">
      <description> error cases </description>
      <created by="Michael Kay" on="2023-01-17"/>
      <test>fn:char(("DOLLAR")) => string-to-codepoints()</test>
      <result>
         <error code="FOCH0005"/>
      </result>
   </test-case>
   
</test-set>
<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-in-scope-namespaces"  covers-40="fn-in-scope-namespaces">
   <description>Tests for the fn:in-scope-namespaces() function (4.0 proposal)</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
      idref="func-in-scope-namespaces"/>

   <dependency type="spec" value="XP40+ XQ40+"/>

   <test-case name="in-scope-namespaces-01">
      <description> Evaluation of in-scope-namespaces function with incorrect arity. </description>
      <created by="Michael Kay" on="2019-11-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[in-scope-namespaces(<a1 xmlns:p1="http://www.example.com"></a1>,"Second Argument")]]></test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="in-scope-namespaces-02">
      <description> Evaluation of in-scope-namespaces function with incorrect argument type. </description>
      <created by="Micahel Kay" on="2019-11-29"/>
      <test>in-scope-namespaces(200)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="in-scope-namespaces-03">
      <description> Evaluation of in-scope-namespaces function for a directly constructed element node. </description>
      <created by="Micahel Kay" on="2019-11-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[in-scope-namespaces(<anElement>some content</anElement>) => map:keys()]]></test>
      <result>
         <assert-eq>"xml"</assert-eq>
      </result>
   </test-case>

   <test-case name="in-scope-namespaces-04">
      <description> Evaluation of in-scope-namespaces function for a directly constructed element node with a namespace declaration. </description>
      <created by="Micahel Kay" on="2019-11-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[in-scope-namespaces(<anElement xmlns:p1 = "http://www.example.com">some content</anElement>) => map:keys()]]></test>
      <result>
         <assert-permutation>"p1", "xml"</assert-permutation>
      </result>
   </test-case>

   <test-case name="in-scope-namespaces-05">
      <description> Evaluation of in-scope-namespaces function for a computed constructed element node with no namespace declaration. </description>
      <created by="Michael Kay" on="2019-11-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test>in-scope-namespaces(element anElement {"Some content"}) => map:keys()</test>
      <result>
         <assert-eq>"xml"</assert-eq>
      </result>
   </test-case>

   <test-case name="in-scope-namespaces-06">
      <description> Evaluation of in-scope-namespaces function for a computed constructed element node and a default namesapce declaration. </description>
      <created by="Michael Kay" on="2019-11-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test>
         declare default element namespace "http://www.example.com"; 
         let $seq := in-scope-namespaces(element anElement {"Some content"}) 
         return $seq("")</test>
      <result>
         <assert-string-value>http://www.example.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="in-scope-namespaces-08">
      <description> Evaluation of in-scope-namespaces function for a directly constructed element node with xmlns attribute and a prolog namesapce declaration. </description>
      <created by="Michael Kay" on="2019-11-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare namespace p1 = "http://www.example.com"; in-scope-namespaces(<anElement xmlns:p1="http://www.somenamespace.com">Some content</anElement>) => map:keys()]]></test>
      <result>
         <assert-permutation>"p1", "xml"</assert-permutation>
      </result>
   </test-case>

   <test-case name="in-scope-namespaces-09">
      <description> Evaluation of in-scope-namespaces function for a directly constructed element node without xmlns attribute and a prolog namesapce declaration. </description>
      <created by="Michael Kay" on="2019-11-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
         declare namespace p1 = "http://www.example.com"; 
         in-scope-namespaces(<anElement>Some content</anElement>)]]></test>
      <result>
         <assert-deep-eq>map{"xml":"http://www.w3.org/XML/1998/namespace"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="in-scope-namespaces-10">
      <description>Use with parse-xml</description>
      <created by="Michael Kay" on="2019-11-29"/>
      <modified by="O'Neil Delpratt" on="2020-03-12" change="Number of fixes in test case"/>
      <test><![CDATA[
      let $seq := in-scope-namespaces(parse-xml("<a xmlns:p='p.ns' xmlns:q='q.ns'><b xmlns:q='Q.ns' xmlns:r='R.ns'/></a>")//b)
      return ($seq?p, $seq?q, $seq?r)]]></test>
      <result>
         <assert-deep-eq>"p.ns", "Q.ns", "R.ns"</assert-deep-eq>
      </result>
   </test-case>


</test-set>

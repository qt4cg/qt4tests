<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-iterate-while" covers-40="fn-iterate-while">
  <description>Tests for the fn:iterate-while function</description>
  <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-iterate-while"/>
  <dependency type="spec" value="XP40+ XQ40+"/>

  <test-case name="iterate-while-001">
    <description>Test successful at first call (no error)</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[fn:iterate-while(1, not#1, function($_) { error() })]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-002">
    <description>Test fails</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[fn:iterate-while(1, boolean#1, function($_) { error() })]]></test>
    <result>
      <error code="FOER0000"/>
    </result>
  </test-case>
  <test-case name="iterate-while-003">
    <description>Test successful at first call</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[fn:iterate-while(1, empty#1, identity#1)]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-004">
    <description>One iteration, return string of empty sequence</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[fn:iterate-while((), empty#1, string#1)]]></test>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="iterate-while-005">
    <description>Skip numbers smaller than 23</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[fn:iterate-while((21 to 24), function($s) { head($s) < 23 }, tail#1)]]></test>
    <result>
      <assert-deep-eq>23, 24</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-006">
    <description>Decrement integers in sequence until sum is small enough</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while((6 to 8), function($s) { sum($s) > 10 }, function($s) { $s ! (. - 1) })
    ]]></test>
    <result>
      <assert-deep-eq>2, 3, 4</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-007">
    <description>Skip items of a sequence until one of two conditions is met</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while(
        reverse(1 to 100),
        function($s) { sum($s) > 20 or head($s) > 4 },
        function($s) { tail($s) }
      )
    ]]></test>
    <result>
      <assert-deep-eq>4, 3, 2, 1</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-008">
    <description>Increment integer until limit is reached</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while(1, function($x) { $x < 10000 }, function($x) { $x + 1 })
    ]]></test>
    <result>
      <assert-eq>10000</assert-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-009">
    <description>Double integer value until limit is reached</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while(2, function($x) { $x < 1000 }, function($x) { $x * $x })
    ]]></test>
    <result>
      <assert-eq>65536</assert-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-010">
    <description>Double length of sequence until limit is reached</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while(1, function($x) { count($x) < 3 }, function($x) { $x, $x })
    ]]></test>
    <result>
      <assert-deep-eq>1, 1, 1, 1</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-011">
    <description>Drop first and last items of a sequence</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while(
        (1 to 100),
        function($s) { $s[last()] - $s[1] > 1 },
        function($s) { subsequence($s, 2, count($s) - 2) }
      )
    ]]></test>
    <result>
      <assert-deep-eq>50, 51</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-012">
    <description>Swap numeric type of item</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while(
        1e0,
        function($x) { $x instance of xs:float },
        function($x) { if($x instance of xs:double) then xs:float($x) else xs:double($x) }
      )
    ]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-013">
    <description>Iteratively change numeric type of item</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while(
        1,
        function($x) { not($x instance of xs:byte) },
        function($x) { if($x instance of xs:short) then xs:byte($x) else xs:short($x) }
      )
    ]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-014">
    <description>Remove characters from a string until searched character is not found</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      fn:iterate-while(
        map { 'string': 'muckanaghederdauhaulia', 'remove': 'a' },
        function($x) { characters($x?string) = $x?remove },
        function($x) { map {
          'string': replace($x?string, $x?remove, ''),
          'remove': codepoints-to-string(string-to-codepoints($x?remove) ! (. + 2))
        } }
      )?string
    ]]></test>
    <result>
      <assert-string-value>unhdrduhul</assert-string-value>
    </result>
  </test-case>
  <test-case name="iterate-while-015">
    <description>Find first non-existing number in a sequence</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      let $s := (1 to 1000)
      return fn:iterate-while(1, function($x) { $x = $s }, function($x) { $x + 1 })
    ]]></test>
    <result>
      <assert-eq>1001</assert-eq>
    </result>
  </test-case>
  <test-case name="iterate-while-016">
    <description>Compute square root</description>
    <created by="Christian Gruen" on="2022-10-13"/>
    <test><![CDATA[
      let $i := 3936256
      return fn:iterate-while(
        $i,
        function($x) { abs($x * $x - $i) >= 0.0000000001 },
        function($x) { ($x + $i div $x) div 2 }
      ) => round()
    ]]></test>
    <result>
      <assert-eq>1984</assert-eq>
    </result>
  </test-case>
</test-set>

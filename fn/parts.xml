<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-parts" covers-40="fn-parts">
   <description>Tests for the fn:parts() function in XPath 4.0</description>
    
   <dependency type="spec" value="XP40+ XQ40+"/>

   <test-case name="parts-dateTime-001">
      <description>parts() function applied to dateTime</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125Z') => parts())?year</test>
      <result>
         <all-of>
            <assert-eq>2020</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-002">
      <description>parts() function applied to dateTime</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125Z') => parts())?month</test>
      <result>
         <all-of>
            <assert-eq>12</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-003">
      <description>parts() function applied to dateTime</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125Z') => parts())?day</test>
      <result>
         <all-of>
            <assert-eq>9</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-004">
      <description>parts() function applied to dateTime</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125Z') => parts())?hours</test>
      <result>
         <all-of>
            <assert-eq>18</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-005">
      <description>parts() function applied to dateTime</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125Z') => parts())?minutes</test>
      <result>
         <all-of>
            <assert-eq>26</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-006">
      <description>parts() function applied to dateTime</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125Z') => parts())?seconds</test>
      <result>
         <all-of>
            <assert-eq>5.125</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-007">
      <description>parts() function applied to dateTime</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125Z') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('PT0S')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-008">
      <description>parts() function applied to dateTime with timezone</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125-05:00') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('-PT5H')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-009">
      <description>parts() function applied to dateTime with no timezone</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:dateTime('2020-12-09T18:26:05.125') => parts())?timezone</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-010">
      <description>parts() function applied to dateTime at 24:00</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:dateTime('2020-12-31T24:00:00Z')) ! (?year, ?month, ?day, ?hours, ?minutes, ?seconds)</test>
      <result>
         <assert-deep-eq>2021, 1, 1, 0, 0, 0</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="parts-dateTime-011">
      <description>parts() function applied to dateTime with timezone</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(parts(xs:dateTime('2020-12-09T18:26:05.125-05:00'))?timezone => parts())?hours</test>
      <result>
         <all-of>
            <assert-eq>-5</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   
   <test-case name="parts-date-001">
      <description>parts() function applied to date</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:date('2020-12-09Z') => parts())?year</test>
      <result>
         <all-of>
            <assert-eq>2020</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-date-002">
      <description>parts() function applied to date</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:date('2020-12-09Z') => parts())?month</test>
      <result>
         <all-of>
            <assert-eq>12</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-date-003">
      <description>parts() function applied to date</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:date('2020-12-09Z') => parts())?day</test>
      <result>
         <all-of>
            <assert-eq>9</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-date-004">
      <description>parts() function applied to date</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:date('2020-12-09Z') => parts())?hours</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-date-005">
      <description>parts() function applied to date</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:date('2020-12-09Z') => parts())?minutes</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-date-006">
      <description>parts() function applied to date</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:date('2020-12-09Z') => parts())?seconds</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-date-007">
      <description>parts() function applied to date</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:date('2020-12-09Z') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('PT0S')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   
   <test-case name="parts-time-001">
      <description>parts() function applied to time</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:time('18:26:05.125Z') => parts())?year</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-time-002">
      <description>parts() function applied to time</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:time('18:26:05.125Z') => parts())?month</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-time-003">
      <description>parts() function applied to time</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:time('18:26:05.125Z') => parts())?day</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-time-004">
      <description>parts() function applied to time</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:time('18:26:05.125Z') => parts())?hours</test>
      <result>
         <all-of>
            <assert-eq>18</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-time-005">
      <description>parts() function applied to time</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:time('18:26:05.125Z') => parts())?minutes</test>
      <result>
         <all-of>
            <assert-eq>26</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-time-006">
      <description>parts() function applied to time</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:time('18:26:05.125Z') => parts())?seconds</test>
      <result>
         <all-of>
            <assert-eq>5.125</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-time-007">
      <description>parts() function applied to time</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:time('18:26:05.125Z') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('PT0S')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   
   <test-case name="parts-gYear-001">
      <description>parts() function applied to gYear</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYear('2020Z') => parts())?year</test>
      <result>
         <all-of>
            <assert-eq>2020</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-gYear-002">
      <description>parts() function applied to gYear</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYear('2020Z') => parts())?month</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYear-003">
      <description>parts() function applied to gYear</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYear('2020Z') => parts())?day</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYear-004">
      <description>parts() function applied to gYear</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYear('2020Z') => parts())?hours</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYear-005">
      <description>parts() function applied to gYear</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYear('2020Z') => parts())?minutes</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYear-006">
      <description>parts() function applied to gYear</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYear('2020Z') => parts())?seconds</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYear-007">
      <description>parts() function applied to gYear</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYear('2020Z') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('PT0S')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   
   <test-case name="parts-gYearMonth-001">
      <description>parts() function applied to gYearMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYearMonth('2020-12Z') => parts())?year</test>
      <result>
         <all-of>
            <assert-eq>2020</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-gYearMonth-002">
      <description>parts() function applied to gYearMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYearMonth('2020-12Z') => parts())?month</test>
      <result>
         <all-of>
            <assert-eq>12</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-gYearMonth-003">
      <description>parts() function applied to gYearMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYearMonth('2020-12Z') => parts())?day</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYearMonth-004">
      <description>parts() function applied to gYearMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYearMonth('2020-12Z') => parts())?hours</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYearMonth-005">
      <description>parts() function applied to gYearMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYearMonth('2020-12Z') => parts())?minutes</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYearMonth-006">
      <description>parts() function applied to gYearMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYearMonth('2020-12Z') => parts())?seconds</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gYearMonth-007">
      <description>parts() function applied to gYearMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gYearMonth('2020-12Z') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('PT0S')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   
   <test-case name="parts-gMonth-001">
      <description>parts() function applied to gMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonth('--12Z') => parts())?year</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonth-002">
      <description>parts() function applied to gMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonth('--12Z') => parts())?month</test>
      <result>
         <all-of>
            <assert-eq>12</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-gMonth-003">
      <description>parts() function applied to gMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonth('--12Z') => parts())?day</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonth-004">
      <description>parts() function applied to gMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonth('--12Z') => parts())?hours</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonth-005">
      <description>parts() function applied to gMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonth('--12Z') => parts())?minutes</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonth-006">
      <description>parts() function applied to gMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonth('--12Z') => parts())?seconds</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonth-007">
      <description>parts() function applied to gMonth</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonth('--12Z') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('PT0S')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   
   <test-case name="parts-gMonthDay-001">
      <description>parts() function applied to gMonthDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonthDay('--12-09Z') => parts())?year</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonthDay-002">
      <description>parts() function applied to gMonthDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonthDay('--12-09Z') => parts())?month</test>
      <result>
         <all-of>
            <assert-eq>12</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-gMonthDay-003">
      <description>parts() function applied to gMonthDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonthDay('--12-09Z') => parts())?day</test>
      <result>
         <all-of>
            <assert-eq>9</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-gMonthDay-004">
      <description>parts() function applied to gMonthDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonthDay('--12-09Z') => parts())?hours</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonthDay-005">
      <description>parts() function applied to gMonthDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonthDay('--12-09Z') => parts())?minutes</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonthDay-006">
      <description>parts() function applied to gMonthDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonthDay('--12-09Z') => parts())?seconds</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gMonthDay-007">
      <description>parts() function applied to gMonthDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gMonthDay('--12-09Z') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('PT0S')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   
   <test-case name="parts-gDay-001">
      <description>parts() function applied to gDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gDay('---09Z') => parts())?year</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gDay-002">
      <description>parts() function applied to gDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gDay('---09Z') => parts())?month</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gDay-003">
      <description>parts() function applied to gDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gDay('---09Z') => parts())?day</test>
      <result>
         <all-of>
            <assert-eq>9</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-gDay-004">
      <description>parts() function applied to gDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gDay('---09Z') => parts())?hours</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gDay-005">
      <description>parts() function applied to gDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gDay('---09Z') => parts())?minutes</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gDay-006">
      <description>parts() function applied to gDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gDay('---09Z') => parts())?seconds</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="parts-gDay-007">
      <description>parts() function applied to gDay</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:gDay('---09Z') => parts())?timezone</test>
      <result>
         <all-of>
            <assert-eq>xs:dayTimeDuration('PT0S')</assert-eq>
            <assert-type>xs:dayTimeDuration</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-duration-001">
      <description>parts() function applied to duration</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:duration('P1Y5M2DT12H30M3.12S')) ! (?years, ?months, ?days, ?hours, ?minutes, ?seconds)</test>
      <result>
         <assert-deep-eq>1, 5, 2, 12, 30, 3.12</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="parts-duration-002">
      <description>parts() function applied to negative duration</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:duration('-P1Y5M2DT12H30M3.12S')) ! (?years, ?months, ?days, ?hours, ?minutes, ?seconds)</test>
      <result>
         <assert-deep-eq>-1, -5, -2, -12, -30, -3.12</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="parts-duration-003">
      <description>parts() function applied to yearMonth duration</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:yearMonthDuration('P1Y5M')) ! (?years, ?months, ?days, ?hours, ?minutes, ?seconds)</test>
      <result>
         <assert-deep-eq>1, 5, 0, 0, 0, 0</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="parts-duration-004">
      <description>parts() function applied to dayTime duration</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:dayTimeDuration('-P2DT12H30M3.12S')) ! (?years, ?months, ?days, ?hours, ?minutes, ?seconds)</test>
      <result>
         <assert-deep-eq>0, 0, -2, -12, -30, -3.12</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="parts-hexBinary-001">
      <description>parts() function applied to QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:hexBinary('0A0B0C0D0EA0FF00') => parts())?octets</test>
      <result>
         <all-of>
            <assert-deep-eq>10, 11, 12, 13, 14, 160, 255, 0</assert-deep-eq>
            <assert-type>xs:unsignedByte*</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-hexBinary-002">
      <description>parts() function applied to QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:hexBinary('') => parts())?octets</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="parts-base64Binary-001">
      <description>parts() function applied to QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:base64Binary('ASI/Tg==') => parts())?octets</test>
      <result>
         <all-of>
            <assert-deep-eq>1, 34, 63, 78</assert-deep-eq>
            <assert-type>xs:unsignedByte*</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-base64Binary-002">
      <description>parts() function applied to QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:base64Binary('') => parts())?octets</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="parts-QName-001">
      <description>parts() function applied to QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:QName('xs:QName') => parts())?prefix</test>
      <result>
         <all-of>
            <assert-eq>"xs"</assert-eq>
            <assert-type>xs:NCName</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-QName-002">
      <description>parts() function applied to QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:QName('xs:QName') => parts())?namespace-uri</test>
      <result>
         <all-of>
            <assert-eq>"http://www.w3.org/2001/XMLSchema"</assert-eq>
            <assert-type>xs:anyURI</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-QName-003">
      <description>parts() function applied to QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:QName('xs:QName') => parts())?local-name</test>
      <result>
         <all-of>
            <assert-eq>"QName"</assert-eq>
            <assert-type>xs:NCName</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="parts-QName-004">
      <description>parts() function applied to unprefixed QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:QName('local') => parts())?prefix</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="parts-QName-005">
      <description>parts() function applied to unprefixed QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:QName('local') => parts())?namespace-uri</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="parts-QName-006">
      <description>parts() function applied to unprefixed QName</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:QName('local') => parts())?local-name</test>
      <result>
         <assert-eq>"local"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-001">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('https://www.example.com/') => parts())?scheme</test>
      <result>
         <assert-eq>"https"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-002">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('books.xml') => parts())?scheme</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-003">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('https://www.example.com/') => parts())?authority</test>
      <result>
         <assert-eq>'www.example.com'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-004">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('https://www.example.com:1202/') => parts())?authority</test>
      <result>
         <assert-eq>'www.example.com:1202'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-005">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('books.xml') => parts())?authority</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-006">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('https://www.example.com/') => parts())?path</test>
      <result>
         <assert-eq>'/'</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-006a">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('https://www.example.com') => parts())?path</test>
      <result>
         <assert-eq>''</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-007">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('books.xml#title') => parts())?path</test>
      <result>
         <assert-eq>"books.xml"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-008">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('http://www.saxonica.com/x/y/books.xml?author=Jane_Austen') => parts())?path</test>
      <result>
         <assert-eq>"/x/y/books.xml"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-009">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('http://www.saxonica.com/x/y/books.xml?author=Jane_Austen') => parts())?query</test>
      <result>
         <assert-eq>"author=Jane_Austen"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-010">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:anyURI('http://www.saxonica.com/x/y/books.xml?author=Jane_Austen'))?query-parameters?author</test>
      <result>
         <assert-eq>"Jane_Austen"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-011">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:anyURI('books.xml?author=Jane_Austen;title=Pride_and_Prejudice'))?query</test>
      <result>
         <assert-eq>"author=Jane_Austen;title=Pride_and_Prejudice"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-012">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:anyURI('books.xml?author=Jane_Austen;title=Pride_and_Prejudice'))?query-parameters?title</test>
      <result>
         <assert-eq>"Pride_and_Prejudice"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-013">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:anyURI('books.xml?author=Jane_Austen' || codepoints-to-string(38) || 'title=Pride_and_Prejudice'))?query-parameters?title</test>
      <result>
         <assert-eq>"Pride_and_Prejudice"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-014">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('books.xml?author=Jane%20Austen') => parts())?query</test>
      <result>
         <assert-eq>"author=Jane Austen"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-015">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:anyURI('books.xml?author=Jane%20Austen;title=Pride%20and%20Prejudice'))?query-parameters?author</test>
      <result>
         <assert-eq>"Jane Austen"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-016">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <modified by="Michael Kay" on="2022-07-21" change="change expected results. See Saxon bug 5574."/>
      <test>parts(xs:anyURI('books.xml?hardback'))?query-parameters?hardback</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-017">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:anyURI('books.xml?author=John;author=Jane'))?query-parameters?author</test>
      <result>
         <assert-deep-eq>"John", "Jane"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-025">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>parts(xs:anyURI('books.xml#main'))?fragment</test>
      <result>
         <assert-eq>"main"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="parts-anyURI-026">
      <description>parts() function applied to xs:anyURI</description>
      <created by="Michael Kay" on="2020-12-09"/>
      <test>(xs:anyURI('books.xml#section%20one') => parts())?fragment</test>
      <result>
         <assert-eq>"section one"</assert-eq>
      </result>
   </test-case>
 

</test-set>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-partition" covers-40="fn-partition">
  <description>Tests for the fn:partition function</description>
  <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-partition"/>
  <dependency type="feature" value="higherOrderFunctions"/>
  <dependency type="spec" value="XP40+ XQ40+"/>
  <test-case name="partition-001">
    <description>Empty sequence, function always true</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((), function($seq, $curr) { true() })]]></test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="partition-002">
    <description>Single integer, function always true</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition(1, function($seq, $curr) { true() })]]></test>
    <result>
      <assert-deep-eq>[1]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-003">
    <description>Integer range, function always true</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((1 to 1000), function($seq, $curr) { true() }) => count()]]></test>
    <result>
      <assert-eq>1000</assert-eq>
    </result>
  </test-case>
  <test-case name="partition-004">
    <description>Filtered integer range, function always true</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((1 to 1000)[. < 3], function($seq, $curr) { true() }) => count()]]></test>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="partition-005">
    <description>Filtered integer range, function always true</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((1 to 1000)[. < 2], function($seq, $curr) { true() }) => count()]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="partition-006">
    <description>Filtered integer range, function always true</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((1 to 1000)[. < 1], function($seq, $curr) { true() }) => count()]]></test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="partition-007">
    <description>Empty sequence, function always false</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((), function($seq, $curr) { false() })]]></test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="partition-008">
    <description>Single integer, function always false</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition(1, function($seq, $curr) { false() })]]></test>
    <result>
      <assert-deep-eq>[1]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-009">
    <description>Integer range, function always false</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((1 to 1000), function($seq, $curr) { false() }) => count()]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="partition-010">
    <description>Filtered integer range, function always false</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((1 to 1000)[. < 3], function($seq, $curr) { false() }) => count()]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="partition-011">
    <description>Filtered integer range, function always false</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((1 to 1000)[. < 2], function($seq, $curr) { false() }) => count()]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="partition-012">
    <description>Filtered integer range, function always false</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <test><![CDATA[array:partition((1 to 1000)[. < 1], function($seq, $curr) { false() }) => count()]]></test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="partition-013">
    <description>Partition equal integers</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <modified by="Michael Kay" on="2023-04-24" change="result corrected, should comprise arrays of single items"/>
    <test><![CDATA[array:partition((1, 1), function($seq, $curr) { not($seq = $curr) })]]></test>
    <result>
      <assert-deep-eq>[1,1]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-014">
    <description>Partition equal integers</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <modified by="Michael Kay" on="2023-04-24" change="result corrected, should comprise arrays of single items"/>
    <test><![CDATA[array:partition((1, 1, 2, 1), function($seq, $curr) { not($seq = $curr) })]]></test>
    <result>
      <assert-deep-eq>[1,1],[2],[1]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-015">
    <description>Partition smaller integers</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <modified by="Michael Kay" on="2023-04-24" change="result corrected, should comprise arrays of single items"/>
    <test><![CDATA[array:partition((846, 23, 5, 8, 6, 1000), function($seq, $curr) { $curr > $seq })]]></test>
    <result>
      <assert-deep-eq>[846,23,5],[8,6],[1000]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-016">
    <description>Partition by first character</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <modified by="Michael Kay" on="2023-04-24" change="result corrected, should comprise arrays of single items"/>
    <test><![CDATA[array:partition(('Anita', 'Anne', 'Barbara', 'Catherine', 'Christine'), function($x, $y) { substring($x[last()], 1, 1) ne substring($y, 1, 1) })]]></test>
    <result>
      <assert-deep-eq>["Anita","Anne"],["Barbara"],["Catherine","Christine"]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-017">
    <description>Partition into sequences of two</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <modified by="Michael Kay" on="2023-04-24" change="result corrected, should comprise arrays of single items"/>
    <test><![CDATA[array:partition((1, 2, 3, 4, 5, 6), function($a, $b){ count($a) eq 2 })]]></test>
    <result>
      <assert-deep-eq>[1,2],[3,4],[5,6]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-018">
    <description>Partition based on sum</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <modified by="Michael Kay" on="2023-04-24" change="result corrected, should comprise arrays of single items"/>
    <test><![CDATA[array:partition((1, 4, 6, 3, 1, 1), function($a, $b) { sum($a) ge 5 })]]></test>
    <result>
      <assert-deep-eq>[1,4],[6],[3,1,1]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-019">
    <description>Partition based on length of tokens</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <modified by="Michael Kay" on="2023-04-24" change="result corrected, should comprise arrays of single items"/>
    <test><![CDATA[array:partition(tokenize('In the beginning was the word'), function($a, $b) { sum(($a, $b) ! string-length()) gt 10 })]]></test>
    <result>
      <assert-deep-eq>["In","the"],["beginning"],["was","the","word"]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-020">
    <description>Densely numbered partitions</description>
    <created by="Christian Gruen" on="2022-08-15"/>
    <modified by="Michael Kay" on="2023-04-24" change="result corrected, should comprise arrays of single items"/>
    <test><![CDATA[array:partition((1, 2, 3, 6, 7, 9, 10), function($seq, $new) { not($new = $seq[last()] + 1) })]]></test>
    <result>
      <assert-deep-eq>[1,2,3],[6,7],[9,10]</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="partition-021">
    <description>Group nodes</description>
    <created by="Michael Kay" on="2023-04-24"/>
    <dependency type="spec" value="XQ40+"/>      
    <test><![CDATA[
      <out>{
        for $group in
           array:partition(
                <doc><h1>Intro</h1><p>blah</p><p>blah2</p><h1>Outtro</h1><p>blath</p><p>blath2</p></doc>/*, 
                function($seq, $new) { boolean($new/self::h1) })
        return <group>{$group}</group>
      }</out>
      ]]></test>
    <result>
      <assert-xml><![CDATA[<out><group><h1>Intro</h1><p>blah</p><p>blah2</p></group><group><h1>Outtro</h1><p>blath</p><p>blath2</p></group></out>]]></assert-xml>
    </result>
  </test-case>
  
  
  <test-case name="partition-901">
    <description>Callback function doesn't return boolean</description>
    <created by="Michael Kay" on="2023-04-24"/>
    <dependency type="spec" value="XQ40+"/>      
    <test><![CDATA[
      <out>{
        for $group in
           array:partition(
                <doc><h1>Intro</h1><p>blah</p><p>blah2</p><h1>Outtro</h1><p>blath</p><p>blath2</p></doc>/*, 
                function($seq, $new) { $new/self::h1 })
        return <group>{$group}</group>
      }</out>
      ]]></test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
</test-set>